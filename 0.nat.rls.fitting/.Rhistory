BootstrapMean$t0std = BootstrapStd$t0
BootstrapMean$nstd = BootstrapStd$n
BootstrapMean$Gstd = BootstrapStd$G
BootstrapMean$avgLSstd = BootstrapStd$avgLS
BootstrapMean$GompRFlexStd = BootstrapStd$GompRFlex
BootstrapMean$GompGFlexStd = BootstrapStd$GompGFlex
names(BootstrapMean)
BootstrapMean = BootstrapMean[, c( "my.strains",  "samplesize",  "R", "Rstd",  "t0",  "t0std",  "n",  "nstd",   "G",
"Gstd", "avgLS",  "avgLSstd", "stdLS",   "BestModel",  "CV",
"GompRFlex", "GompRFlexStd", "GompGFlex",  "GompGFlexStd",
"GompLogLikFlex",  "GompAICFlex",  "WeibShapeFlex",  "WeibRateFlex",
"WeibLogLikFlex",  "WeibAICFlex"  )];
BootstrapMean
BootstrapMeanPublishing = data.frame( BootstrapMean[, c("my.strains")] )
BootstrapMeanPublishing$RwithStd = as.vector( paste(round(BootstrapMean$R, 4), round(BootstrapMean$Rstd,4), sep=" +/- ") );
BootstrapMeanPublishing$t0withStd = as.vector( paste(round(BootstrapMean$t0, 1), round(BootstrapMean$t0std,1), sep=" +/- ") );
BootstrapMeanPublishing$nwithStd = as.vector( paste(round(BootstrapMean$n, 1), round(BootstrapMean$nstd,3), sep=" +/- ") );
BootstrapMeanPublishing$GwithStd = as.vector( paste(round(BootstrapMean$G, 2), round(BootstrapMean$Gstd,3), sep=" +/- ") );
BootstrapMeanPublishing$GompRFlexwithStd = as.vector( paste(round(BootstrapMean$GompRFlex, 3), round(BootstrapMean$GompRFlexStd,3), sep=" +/- ") );
BootstrapMeanPublishing$GompGFlexwithStd = as.vector( paste(round(BootstrapMean$GompGFlex, 2), round(BootstrapMean$GompGFlexStd,3), sep=" +/- ") );
BootstrapMeanPublishing$avgLSwithStd = as.vector( paste(round(BootstrapMean$avgLS, 2), round(BootstrapMean$avgLSstd,3), sep=" +/- ") );
BootstrapMeanPublishing
write.csv(BootstrapMean, file='sandbox/_Kaberlein04_Bootstrap_summary.csv', row.names = FALSE)
write.csv(BootstrapMeanPublishing, file='sandbox/_Kaberlein04_Bootstrap_summary_Publications.csv', row.names = FALSE)
rm(list=ls())
setwd("~/github/bmc_netwk_aging_manuscript/R1/1.kaeberlein04plos")
library('flexsurv')
library('stringr')
source("../lifespan.r")
set.seed(20170701) #for repeatability
RUNS = 5; #bootstrap runs
list.files()
tb.ori = read.table("092304.merged.rls.csv", header = T, sep="\t")
summary(tb.ori)
strains = names(tb.ori)
strains
my.strains = c( "fig1b.BY4742",  "fig2b.sir2", "fig4b.by4742.SIR2.ox.2glucose",
"fig1b.fob1","fig1b.hxk2","fig1b.fob1.hxk2"   )
tb = tb.ori[, my.strains]
for( BootstrapCount in 1:RUNS ) {#!!!!!!
report = data.frame(my.strains)
report$samplesize = NA; report$R=NA; report$t0=NA; report$n=NA; report$G=NA; #report$longfilename=NA;
for( i in 1:length(report[,1])){
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
report$samplesize[i] = length(my.data)
#boostrap
bt.data = sample(my.data, replace=TRUE); # BOOTSTRAP HERE
GompFlex = flexsurvreg(formula = Surv(bt.data) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(bt.data) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(bt.data)
report$stdLS[i] =  sd(bt.data)
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
lifespan=bt.data,
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-10, 1, 1), upper=c(1,200,20) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$G[i] = (report$n[i] - 1)/report$t0[i]
report$BinomialAIC[i] = 2*3 + 2*fitBinom$value #20171003 AIC for 3-parameter binomial aging model
}
report$BestModel = 'NA';
report$BestModel = ifelse((report$GompAICFlex < report$WeibAICFlex)&(report$GompAICFlex < report$BinomialAIC), "Gomp", report$BestModel)
report$BestModel = ifelse((report$BinomialAIC < report$WeibAICFlex)&(report$BinomialAIC < report$GompAICFlex), "Binom", report$BestModel)
report$BestModel = ifelse((report$WeibAICFlex < report$GompAICFlex)&(report$WeibAICFlex < report$BinomialAIC), "Weib", report$BestModel)
report$BestModel = ifelse( (abs(report$BinomialAIC - report$GompAICFlex)<2 ) | ( abs(report$BinomialAIC-report$WeibAICFlex) <2 ), "bin<2", report$BestModel)
outname = paste("bootstrap/", BootstrapCount, ".csv", sep='');  #has to be changed here !!!
write.csv(report, file = outname, row.names = FALSE);
}#end of boostrap loop
BootstrapMean = report;
BootstrapStd = report;
rownames = names(report);
for( col in 2:length(report[1,])) {
for ( row in 1:length(report[,1])) {
buffer = c();
for( BootstrapCount in 1:RUNS ) {
filename = paste("bootstrap/", BootstrapCount, ".csv", sep='');
tb = read.csv(filename)
if( rownames[col] == "BestModel" ) {
buffer = as.character( c(buffer, as.character(tb[row,col])) );
} else {
buffer = c(buffer, tb[row, col]);
}
}
if( rownames[col] == "BestModel" ) {
tmp = table( buffer );
BootstrapMean[row,col] = paste(names(tmp), tmp, sep="=", collapse = ":");
} else {
BootstrapMean[row,col] = mean(buffer);
BootstrapStd[row,col] = sqrt(var(buffer));
}
}
}
BootstrapMean
BootstrapStd
BootstrapMean$Rstd = BootstrapStd$R
BootstrapMean$t0std = BootstrapStd$t0
BootstrapMean$nstd = BootstrapStd$n
BootstrapMean$Gstd = BootstrapStd$G
BootstrapMean$avgLSstd = BootstrapStd$avgLS
BootstrapMean$GompRFlexStd = BootstrapStd$GompRFlex
BootstrapMean$GompGFlexStd = BootstrapStd$GompGFlex
names(BootstrapMean)
BootstrapMean = BootstrapMean[, c( "my.strains",  "samplesize",  "R", "Rstd",  "t0",  "t0std",  "n",  "nstd",   "G",
"Gstd", "avgLS",  "avgLSstd", "stdLS",   "BestModel",  "CV",
"GompRFlex", "GompRFlexStd", "GompGFlex",  "GompGFlexStd",
"GompLogLikFlex",  "GompAICFlex",  "WeibShapeFlex",  "WeibRateFlex",
"WeibLogLikFlex",  "WeibAICFlex"  )];
BootstrapMean
BootstrapMeanPublishing = data.frame( BootstrapMean[, c("my.strains")] )
BootstrapMeanPublishing$RwithStd = as.vector( paste(round(BootstrapMean$R, 4), round(BootstrapMean$Rstd,4), sep=" +/- ") );
BootstrapMeanPublishing$t0withStd = as.vector( paste(round(BootstrapMean$t0, 1), round(BootstrapMean$t0std,1), sep=" +/- ") );
BootstrapMeanPublishing$nwithStd = as.vector( paste(round(BootstrapMean$n, 1), round(BootstrapMean$nstd,3), sep=" +/- ") );
BootstrapMeanPublishing$GwithStd = as.vector( paste(round(BootstrapMean$G, 2), round(BootstrapMean$Gstd,3), sep=" +/- ") );
BootstrapMeanPublishing$GompRFlexwithStd = as.vector( paste(round(BootstrapMean$GompRFlex, 3), round(BootstrapMean$GompRFlexStd,3), sep=" +/- ") );
BootstrapMeanPublishing$GompGFlexwithStd = as.vector( paste(round(BootstrapMean$GompGFlex, 2), round(BootstrapMean$GompGFlexStd,3), sep=" +/- ") );
BootstrapMeanPublishing$avgLSwithStd = as.vector( paste(round(BootstrapMean$avgLS, 2), round(BootstrapMean$avgLSstd,3), sep=" +/- ") );
BootstrapMeanPublishing
write.csv(BootstrapMean, file='sandbox/_Kaberlein04_Bootstrap_summary.csv', row.names = FALSE)
write.csv(BootstrapMeanPublishing, file='sandbox/_Kaberlein04_Bootstrap_summary_Publications.csv', row.names = FALSE)
rm(list=ls())
setwd("~/github/bmc_netwk_aging_manuscript/R1/1.kaeberlein04plos")
library('flexsurv')
library('stringr')
source("../lifespan.r")
set.seed(20170701) #for repeatability
RUNS = 100; #bootstrap runs
list.files()
tb.ori = read.table("092304.merged.rls.csv", header = T, sep="\t")
summary(tb.ori)
strains = names(tb.ori)
strains
my.strains = c( "fig1b.BY4742",  "fig2b.sir2", "fig4b.by4742.SIR2.ox.2glucose",
"fig1b.fob1","fig1b.hxk2","fig1b.fob1.hxk2"   )
tb = tb.ori[, my.strains]
for( BootstrapCount in 1:RUNS ) {#!!!!!!
report = data.frame(my.strains)
report$samplesize = NA; report$R=NA; report$t0=NA; report$n=NA; report$G=NA; #report$longfilename=NA;
for( i in 1:length(report[,1])){
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
report$samplesize[i] = length(my.data)
#boostrap
bt.data = sample(my.data, replace=TRUE); # BOOTSTRAP HERE
GompFlex = flexsurvreg(formula = Surv(bt.data) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(bt.data) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(bt.data)
report$stdLS[i] =  sd(bt.data)
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
lifespan=bt.data,
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-10, 1, 1), upper=c(1,200,20) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$G[i] = (report$n[i] - 1)/report$t0[i]
report$BinomialAIC[i] = 2*3 + 2*fitBinom$value #20171003 AIC for 3-parameter binomial aging model
}
report$BestModel = 'NA';
report$BestModel = ifelse((report$GompAICFlex < report$WeibAICFlex)&(report$GompAICFlex < report$BinomialAIC), "Gomp", report$BestModel)
report$BestModel = ifelse((report$BinomialAIC < report$WeibAICFlex)&(report$BinomialAIC < report$GompAICFlex), "Binom", report$BestModel)
report$BestModel = ifelse((report$WeibAICFlex < report$GompAICFlex)&(report$WeibAICFlex < report$BinomialAIC), "Weib", report$BestModel)
report$BestModel = ifelse( (abs(report$BinomialAIC - report$GompAICFlex)<2 ) | ( abs(report$BinomialAIC-report$WeibAICFlex) <2 ), "bin<2", report$BestModel)
outname = paste("bootstrap/", BootstrapCount, ".csv", sep='');  #has to be changed here !!!
write.csv(report, file = outname, row.names = FALSE);
}#end of boostrap loop
BootstrapMean = report;
BootstrapStd = report;
rownames = names(report);
for( col in 2:length(report[1,])) {
for ( row in 1:length(report[,1])) {
buffer = c();
for( BootstrapCount in 1:RUNS ) {
filename = paste("bootstrap/", BootstrapCount, ".csv", sep='');
tb = read.csv(filename)
if( rownames[col] == "BestModel" ) {
buffer = as.character( c(buffer, as.character(tb[row,col])) );
} else {
buffer = c(buffer, tb[row, col]);
}
}
if( rownames[col] == "BestModel" ) {
tmp = table( buffer );
BootstrapMean[row,col] = paste(names(tmp), tmp, sep="=", collapse = ":");
} else {
BootstrapMean[row,col] = mean(buffer);
BootstrapStd[row,col] = sqrt(var(buffer));
}
}
}
BootstrapMean
BootstrapStd
BootstrapMean$Rstd = BootstrapStd$R
BootstrapMean$t0std = BootstrapStd$t0
BootstrapMean$nstd = BootstrapStd$n
BootstrapMean$Gstd = BootstrapStd$G
BootstrapMean$avgLSstd = BootstrapStd$avgLS
BootstrapMean$GompRFlexStd = BootstrapStd$GompRFlex
BootstrapMean$GompGFlexStd = BootstrapStd$GompGFlex
names(BootstrapMean)
BootstrapMean = BootstrapMean[, c( "my.strains",  "samplesize",  "R", "Rstd",  "t0",  "t0std",  "n",  "nstd",   "G",
"Gstd", "avgLS",  "avgLSstd", "stdLS",   "BestModel",  "CV",
"GompRFlex", "GompRFlexStd", "GompGFlex",  "GompGFlexStd",
"GompLogLikFlex",  "GompAICFlex",  "WeibShapeFlex",  "WeibRateFlex",
"WeibLogLikFlex",  "WeibAICFlex"  )];
BootstrapMean
BootstrapMeanPublishing = data.frame( BootstrapMean[, c("my.strains")] )
BootstrapMeanPublishing$RwithStd = as.vector( paste(round(BootstrapMean$R, 4), round(BootstrapMean$Rstd,4), sep=" +/- ") );
BootstrapMeanPublishing$t0withStd = as.vector( paste(round(BootstrapMean$t0, 1), round(BootstrapMean$t0std,1), sep=" +/- ") );
BootstrapMeanPublishing$nwithStd = as.vector( paste(round(BootstrapMean$n, 1), round(BootstrapMean$nstd,3), sep=" +/- ") );
BootstrapMeanPublishing$GwithStd = as.vector( paste(round(BootstrapMean$G, 2), round(BootstrapMean$Gstd,3), sep=" +/- ") );
BootstrapMeanPublishing$GompRFlexwithStd = as.vector( paste(round(BootstrapMean$GompRFlex, 3), round(BootstrapMean$GompRFlexStd,3), sep=" +/- ") );
BootstrapMeanPublishing$GompGFlexwithStd = as.vector( paste(round(BootstrapMean$GompGFlex, 2), round(BootstrapMean$GompGFlexStd,3), sep=" +/- ") );
BootstrapMeanPublishing$avgLSwithStd = as.vector( paste(round(BootstrapMean$avgLS, 2), round(BootstrapMean$avgLSstd,3), sep=" +/- ") );
BootstrapMeanPublishing
write.csv(BootstrapMean, file='sandbox/_Kaberlein04_Bootstrap_summary.csv', row.names = FALSE)
write.csv(BootstrapMeanPublishing, file='sandbox/_Kaberlein04_Bootstrap_summary_Publications.csv', row.names = FALSE)
#evolutionary rates
Kdata = read.csv( "Sce.Spa.KaKs.csv");
# protein interaction network (PIN) in gene
pairs = read.csv("pairs.csv");
# this is the growth fitness data
fitness = read.csv("growth.fitness.hom.csv");
fitness$orf = as.character( fitness$orf );
str(pairs)
#make sure gene names are treated as letters, not fake numbers (factors)
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
# How do we know that ORF1 and 2 are now letters?
# ... ...
Kdata$orfname = as.character(Kdata$orfname)
ids = c(pairs$ORF1, pairs$ORF2);
degree = table( ids );
sum(degree); #check the counting result, the length of ids
length(ids)
#now, put degree into a spreadsheet
net = data.frame(degree);
str(net);
net$id = as.character( net$ids); #make sure gene names are "characters"
net = net[, -1]; #remove the first column of unecessary data
#ids are orfs in net
# By now, we have interaction degree in 'net' and
# evolutionary rates in 'data'.
# We need to merge the two dataframes (spreadsheets)
# based on ORFs (like SSNs for genes)
str(net)
str(Kdata)
#check network gene names match to gene names in the evolutionary data
intersect( net$id, Kdata$orfname);
# we 2676 matching ORFs
# try to do linear regression between evolutionary rate
# and number of interactions
lm( Kdata$Ka ~ net$Freq) #won't work
#evolutionary rates
Kdata = read.csv( "Sce.Spa.KaKs.csv");
# protein interaction network (PIN) in gene
pairs = read.csv("pairs.csv");
# this is the growth fitness data
fitness = read.csv("growth.fitness.hom.csv");
fitness$orf = as.character( fitness$orf );
str(pairs)
#make sure gene names are treated as letters, not fake numbers (factors)
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
# How do we know that ORF1 and 2 are now letters?
# ... ...
Kdata$orfname = as.character(Kdata$orfname)
ids = c(pairs$ORF1, pairs$ORF2);
degree = table( ids );
sum(degree); #check the counting result, the length of ids
length(ids)
#now, put degree into a spreadsheet
net = data.frame(degree);
str(net);
net$id = as.character( net$ids); #make sure gene names are "characters"
net = net[, -1]; #remove the first column of unecessary data
#ids are orfs in net
# By now, we have interaction degree in 'net' and
# evolutionary rates in 'data'.
# We need to merge the two dataframes (spreadsheets)
# based on ORFs (like SSNs for genes)
str(net)
str(Kdata)
#check network gene names match to gene names in the evolutionary data
intersect( net$id, Kdata$orfname);
# we 2676 matching ORFs
# try to do linear regression between evolutionary rate
# and number of interactions
lm( Kdata$Ka ~ net$Freq) #won't work
#evolutionary rates
Kdata = read.csv( "Sce.Spa.KaKs.csv");
# protein interaction network (PIN) in gene
pairs = read.csv("pairs.csv");
# this is the growth fitness data
fitness = read.csv("growth.fitness.hom.csv");
fitness$orf = as.character( fitness$orf );
View(fitness)
View(Kdata)
View(pairs)
View(pairs)
str(pairs)
#make sure gene names are treated as letters, not fake numbers (factors)
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
# How do we know that ORF1 and 2 are now letters?
# ... ...
Kdata$orfname = as.character(Kdata$orfname)
ids = c(pairs$ORF1, pairs$ORF2); #merged two columns into one
degree = table( ids );  #tabulate the occurence of each element
sum(degree); #check the counting result, the length of ids
length(ids)
#now, put degree into a spreadsheet
net = data.frame(degree);
str(net);
net$id = as.character( net$ids); #make sure gene names are "characters"
net = net[, -1]; #remove the first column of unecessary data
#ids are orfs in net
# By now, we have interaction degree in 'net' and
# evolutionary rates in 'data'.
# We need to merge the two dataframes (spreadsheets)
# based on ORFs (like SSNs for genes)
str(net)
str(Kdata)
#check network gene names match to gene names in the evolutionary data
intersect( net$id, Kdata$orfname);
# we 2676 matching ORFs
# try to do linear regression between evolutionary rate
# and number of interactions
lm( Kdata$Ka ~ net$Freq) #won't work
str(degree)
head(net)
net = data.frame(degree);
head(net)
net = data.frame(degree);
str(net);
net$id = as.character( net$ids); #make sure gene names are "characters"
net = net[, -1]; #remove the first column of unecessary data
#ids are orfs in net
head(net)
net = data.frame(degree);
head(net)
intersect( net$id, Kdata$orfname);
View(net)
net$Omega = Kdata$Omega[match( net$ids , Kdata$orfname  )]
View(net)
View(net)
View(net)
View(net)
orfnamePositionsInNet = match(Kdata$orfname, net$id )
positions =  Kdata$orfname %in% net$ids ;  # many true or false,
positions
View(net)
m = lm(Kdata$Ka ~ Kdata$degree);
#evolutionary rates
Kdata = read.csv( "Sce.Spa.KaKs.csv");
# protein interaction network (PIN) in gene
pairs = read.csv("pairs.csv");
# this is the growth fitness data
fitness = read.csv("growth.fitness.hom.csv");
fitness$orf = as.character( fitness$orf );
str(pairs)
#make sure gene names are treated as letters, not fake numbers (factors)
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
# How do we know that ORF1 and 2 are now letters?
# ... ...
Kdata$orfname = as.character(Kdata$orfname)
ids = c(pairs$ORF1, pairs$ORF2); #merged two columns into one
degree = table( ids );  #tabulate the occurence of each element
# quality check
sum(degree); #check the counting result, the length of ids
length(ids)
#now, put degree into a spreadsheet
net = data.frame(degree);
str(net);
net$ids = as.character( net$ids); #make sure gene names are "characters"
net = net[, -1]; #remove the first column of unecessary data
#ids are orfs in net
# By now, we have interaction degree in 'net' and
# evolutionary rates in 'data'.
# We need to merge the two dataframes (spreadsheets)
# based on ORFs (like SSNs for genes)
str(net)
str(Kdata)
#check network gene names match to gene names in the evolutionary data
intersect( net$ids, Kdata$orfname);
#evolutionary rates
Kdata = read.csv( "Sce.Spa.KaKs.csv");
# protein interaction network (PIN) in gene
pairs = read.csv("pairs.csv");
# this is the growth fitness data
fitness = read.csv("growth.fitness.hom.csv");
fitness$orf = as.character( fitness$orf );
str(pairs)
#make sure gene names are treated as letters, not fake numbers (factors)
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
# How do we know that ORF1 and 2 are now letters?
# ... ...
Kdata$orfname = as.character(Kdata$orfname)
ids = c(pairs$ORF1, pairs$ORF2); #merged two columns into one
degree = table( ids );  #tabulate the occurence of each element
# quality check
sum(degree); #check the counting result, the length of ids
length(ids)
#now, put degree into a spreadsheet
net = data.frame(degree);
str(net);
net$ids = as.character( net$ids); #make sure gene names are "characters"
net = net[, -1]; #remove the first column of unecessary data
#ids are orfs in net
# By now, we have interaction degree in 'net' and
# evolutionary rates in 'data'.
# We need to merge the two dataframes (spreadsheets)
# based on ORFs (like SSNs for genes)
str(net)
str(Kdata)
#check network gene names match to gene names in the evolutionary data
####  intersect( net$ids, Kdata$orfname);
# we 2676 matching ORF
# try to do linear regression between evolutionary rate
# and number of interactions
lm( Kdata$Ka ~ net$Freq) #won't work
net = data.frame(degree);
str(net);
net$ids = as.character( net$ids); #make sure gene names are "characters"
net = net[, -1]; #remove the first column of unecessary data
net = data.frame(degree);
str(net);
net$ids = as.character( net$ids); #make sure gene names are "characters"
net = net[, -1]; #remove the first column of unecessary data
str(net)
str(Kdata)
# We need to put them together by 'match'' data and net
# This match 'net$Freq' into 'data'
Kdata$degree = net$Freq[match(Kdata$orfname, net$ids )]
head(Kdata)
head(net)
net = data.frame(degree);
str(net);
net$ids = as.character( net$ids); #make sure gene names are "characters"
head(net)
#now, put degree into a spreadsheet
net = data.frame(degree);
str(net);
net$ids = as.character( net$ids); #make sure gene names are "characters"
#net = net[, -1]; #remove the first column of unecessary data
head(net)
Kdata$degree = net$Freq[match(Kdata$orfname, net$ids )]
orfnamePositionsInNet = match(Kdata$orfname, net$ids )
positions =  Kdata$orfname %in% net$ids ;  # many true or false,
#visual examination to prevent errors
head(Kdata)
net[net$ids=='YAL010C', ]
net[net$ids=='YAL012W', ]
# find out correlation bw degree and Omega, Ka, Ks
m = lm(Kdata$Ka ~ Kdata$degree);
summary(m)
plot( Kdata$Ka ~ Kdata$degree, xlab='interactions per protein', ylab='evolutionary rate'); #this is figure 1
#this looks like a non-linear negative correlation
abline(m, col="red" );
dev.off()
#this looks like a non-linear negative correlation
plot( Kdata$Ka ~ Kdata$degree, xlab='interactions per protein', ylab='evolutionary rate'); #this is figure 1
#this looks like a non-linear negative correlation
abline(m, col="red" );
### Now We will work on Figure 2.
# math data and fitness
Kdata$YPD = fit$YPD[match(Kdata$orfname, fit$orf)]
### Now We will work on Figure 2.
# math data and fitness
Kdata$YPD = fitness$YPD[match(Kdata$orfname, fitness$orf)]
#visual check two entries
fitness[fitness$orf=='YAL007C',]
# Now, for figure 2
summary(lm(Kdata$Ka ~ Kdata$YPD)) #evolutionary rate = ka ypd= growth in rich media)
# allows us to compare overall fitness
summary(lm(Kdata$degree ~ Kdata$YPD))
summary(lm( log(Kdata$degree) ~ Kdata$YPD))#normalization
summary(lm(Kdata$Ka ~ Kdata$degree)) #evolutionary rate compared to frequency of interactions
summary(lm(Kdata$Ka ~ Kdata$YPD + Kdata$degree ))
# try to see conditional correlation between degree ~ omega
#  ... ...
# summary(lm(Kdata$Omega ~ ????  ))
#
