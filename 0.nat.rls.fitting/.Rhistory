Kdata$degree = net$Freq[match(Kdata$orfname, net$ids )]
head(Kdata)
head(net)
net = data.frame(degree);
str(net);
net$ids = as.character( net$ids); #make sure gene names are "characters"
head(net)
#now, put degree into a spreadsheet
net = data.frame(degree);
str(net);
net$ids = as.character( net$ids); #make sure gene names are "characters"
#net = net[, -1]; #remove the first column of unecessary data
head(net)
Kdata$degree = net$Freq[match(Kdata$orfname, net$ids )]
orfnamePositionsInNet = match(Kdata$orfname, net$ids )
positions =  Kdata$orfname %in% net$ids ;  # many true or false,
#visual examination to prevent errors
head(Kdata)
net[net$ids=='YAL010C', ]
net[net$ids=='YAL012W', ]
# find out correlation bw degree and Omega, Ka, Ks
m = lm(Kdata$Ka ~ Kdata$degree);
summary(m)
plot( Kdata$Ka ~ Kdata$degree, xlab='interactions per protein', ylab='evolutionary rate'); #this is figure 1
#this looks like a non-linear negative correlation
abline(m, col="red" );
dev.off()
#this looks like a non-linear negative correlation
plot( Kdata$Ka ~ Kdata$degree, xlab='interactions per protein', ylab='evolutionary rate'); #this is figure 1
#this looks like a non-linear negative correlation
abline(m, col="red" );
### Now We will work on Figure 2.
# math data and fitness
Kdata$YPD = fit$YPD[match(Kdata$orfname, fit$orf)]
### Now We will work on Figure 2.
# math data and fitness
Kdata$YPD = fitness$YPD[match(Kdata$orfname, fitness$orf)]
#visual check two entries
fitness[fitness$orf=='YAL007C',]
# Now, for figure 2
summary(lm(Kdata$Ka ~ Kdata$YPD)) #evolutionary rate = ka ypd= growth in rich media)
# allows us to compare overall fitness
summary(lm(Kdata$degree ~ Kdata$YPD))
summary(lm( log(Kdata$degree) ~ Kdata$YPD))#normalization
summary(lm(Kdata$Ka ~ Kdata$degree)) #evolutionary rate compared to frequency of interactions
summary(lm(Kdata$Ka ~ Kdata$YPD + Kdata$degree ))
# try to see conditional correlation between degree ~ omega
#  ... ...
# summary(lm(Kdata$Omega ~ ????  ))
#
rm(list=ls())
setwd("~/github/network_aging_ms_draft")
library('flexsurv')
source("../lifespan.r")
rm(list=ls())
setwd("~/github/network_aging_ms_draft")
library('flexsurv')
source("../lifespan.r")
rm(list=ls())
setwd("~/github/network_aging_ms_draft")
rm(list=ls())
setwd("~/github/network_aging_ms_draft")
library('flexsurv')
source("../lifespan.r")
rm(list=ls())
setwd("~/github/network_aging_ms_draft")
library('flexsurv')
source("lifespan.r")
set.seed(20170101)
#files = list.files(path=".qinlab_rls/", pattern="rls.tab")
#tmp1 = gsub("\\d{6}.", "", files)
#redundant_strains = gsub(".rls.tab", "", tmp1)
#strains = sort( unique( redundant_strains ))
#strains
my.strains=c("101S", "M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57", "YPS128","YPS163")
set.seed(20170101)
files = list.files(path="rls/", pattern="rls.csv")
#tmp1 = gsub("\\d{6}.", "", files)
#redundant_strains = gsub(".rls.tab", "", tmp1)
#strains = sort( unique( redundant_strains ))
#strains
my.strains=c("101S", "M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57", "YPS128","YPS163")
files
set.seed(20170101)
files = list.files(path="rls/", pattern="rls.csv")
#tmp1 = gsub("\\d{6}.", "", files)
#redundant_strains = gsub(".rls.tab", "", tmp1)
#strains = sort( unique( redundant_strains ))
#strains
my.strains=c("101S", "M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57", "YPS128","YPS163")
files
rm(list=ls())
setwd("~/github/network_aging_ms_draft")
library('flexsurv')
source("lifespan.r")
rm(list=ls())
library('flexsurv')
source("lifespan.r")
set.seed(20170101)
files = list.files(path="rls/", pattern="rls.csv")
#tmp1 = gsub("\\d{6}.", "", files)
#redundant_strains = gsub(".rls.tab", "", tmp1)
#strains = sort( unique( redundant_strains ))
#strains
my.strains=c("101S", "M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57", "YPS128","YPS163")
files
set.seed(20170101)
files = list.files(path="rls", pattern="rls.csv")
#tmp1 = gsub("\\d{6}.", "", files)
#redundant_strains = gsub(".rls.tab", "", tmp1)
#strains = sort( unique( redundant_strains ))
#strains
my.strains=c("101S", "M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57", "YPS128","YPS163")
files
set.seed(20170101)
files = list.files(path="rls", pattern="csv")
#tmp1 = gsub("\\d{6}.", "", files)
#redundant_strains = gsub(".rls.tab", "", tmp1)
#strains = sort( unique( redundant_strains ))
#strains
my.strains=c("101S", "M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57", "YPS128","YPS163")
files
i=2
tb = read.table( paste("rls/",files[i],sep=''), sep="\t")
tb
i=2
tb = read.table( paste("rls/",files[i],sep=''), sep="\t")
GompFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'weibull')
#str(GompFlex)
GompFlex$res
GompFlex$res.t
GompFlex$opt$hessian
#str(WeibFlex)
i=2
tb = read.csv( paste("rls/",files[i],sep=''), header=F)
tb
for( i in 1:length(report[,1])){
#for( i in 3:4){
tb = read.csv( paste("rls/",my.files[1],sep=''))
if( length(my.files)> 1){
for( fi in 2:length(my.files)) {
tmp.tb = read.table( paste("../qinlab_rls/",my.files[fi],sep=''), sep="\t")
tb = rbind( tb, tmp.tb)
}
}
report$samplesize[i] = length(tb[,1])
GompFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(tb[,1])
report$stdLS[i] =  sd(tb[,1])
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
lifespan=tb[,1],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-3, 1, 2), upper=c(0.1,200,10) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$G[i] = (report$n[i] - 1)/report$t0[i]
}
set.seed(20170101)
files = list.files(path="rls", pattern="csv")
#tmp1 = gsub("\\d{6}.", "", files)
#redundant_strains = gsub(".rls.tab", "", tmp1)
#strains = sort( unique( redundant_strains ))
#strains
my.strains=c("101S", "M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57", "YPS128","YPS163")
report = data.frame(cbind(my.strains))
report$samplesize = NA; report$R=NA; report$t0=NA; report$n=NA; report$G=NA; report$longfilename=NA;
i=2
tb = read.csv( paste("rls/",files[i],sep=''), header=F)
GompFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'weibull')
#str(GompFlex)
GompFlex$res
GompFlex$res.t
GompFlex$opt$hessian
#str(WeibFlex)
for( i in 1:length(report[,1])){
#for( i in 3:4){
tb = read.csv( paste("rls/",my.files[1],sep=''))
if( length(my.files)> 1){
for( fi in 2:length(my.files)) {
tmp.tb = read.table( paste("../qinlab_rls/",my.files[fi],sep=''), sep="\t")
tb = rbind( tb, tmp.tb)
}
}
report$samplesize[i] = length(tb[,1])
GompFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(tb[,1])
report$stdLS[i] =  sd(tb[,1])
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
lifespan=tb[,1],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-3, 1, 2), upper=c(0.1,200,10) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$G[i] = (report$n[i] - 1)/report$t0[i]
}
for( i in 1:length(report[,1])){
#for( i in 3:4){
tb = read.csv( paste("rls/",files[1],sep=''))
if( length(my.files)> 1){
for( fi in 2:length(my.files)) {
tmp.tb = read.table( paste("../qinlab_rls/",my.files[fi],sep=''), sep="\t")
tb = rbind( tb, tmp.tb)
}
}
report$samplesize[i] = length(tb[,1])
GompFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(tb[,1])
report$stdLS[i] =  sd(tb[,1])
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
lifespan=tb[,1],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-3, 1, 2), upper=c(0.1,200,10) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$G[i] = (report$n[i] - 1)/report$t0[i]
}
for( i in 1:length(report[,1])){
#for( i in 3:4){
tb = read.csv( paste("rls/",files[1],sep=''))
report$samplesize[i] = length(tb[,1])
GompFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(tb[,1])
report$stdLS[i] =  sd(tb[,1])
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
lifespan=tb[,1],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-3, 1, 2), upper=c(0.1,200,10) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$G[i] = (report$n[i] - 1)/report$t0[i]
}
View(report)
for( i in 1:length(report[,1])){
#for( i in 3:4){
tb = read.csv( paste("rls/",files[1],sep=''))
report$samplesize[i] = length(tb[,1])
GompFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(tb[,1])
report$stdLS[i] =  sd(tb[,1])
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
lifespan=tb[,1],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-3, 1, 2), upper=c(0.1,200,10) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$G[i] = (report$n[i] - 1)/report$t0[i]
}
View(report)
for( i in 1:length(report[,1])){
#for( i in 3:4){
tb = read.csv( paste("rls/",files[i],sep=''))
report$samplesize[i] = length(tb[,1])
GompFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(tb[,1])
report$stdLS[i] =  sd(tb[,1])
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
lifespan=tb[,1],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-3, 1, 2), upper=c(0.1,200,10) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$G[i] = (report$n[i] - 1)/report$t0[i]
}
View(report)
rm(list=ls())
library('flexsurv')
source("lifespan.r")
set.seed(20170101)
files = list.files(path="rls", pattern="csv")
#tmp1 = gsub("\\d{6}.", "", files)
#redundant_strains = gsub(".rls.tab", "", tmp1)
#strains = sort( unique( redundant_strains ))
#strains
my.strains=c("101S", "M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57", "YPS128","YPS163")
strains = my.strains; #just to make old code compatible.
report = data.frame(cbind(my.strains))
report$samplesize = NA; report$R=NA; report$t0=NA; report$n=NA; report$G=NA; report$longfilename=NA;
set.seed(20170101)
files = list.files(path="rls", pattern="csv")
my.strains=c("101S", "M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57", "YPS128","YPS163")
strains = my.strains; #just to make old code compatible.
report = data.frame(cbind(my.strains))
report$samplesize = NA; report$R=NA; report$t0=NA; report$n=NA; report$G=NA; report$longfilename=NA;
i=2
tb = read.csv( paste("rls/",files[i],sep=''), header=F)
GompFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'weibull')
#str(GompFlex)
GompFlex$res
GompFlex$res.t
GompFlex$opt$hessian
#str(WeibFlex)
rm(list=ls())
library('flexsurv')
source("lifespan.r")
set.seed(20170101)
files = list.files(path="rls", pattern="csv")
my.strains=c("101S", "M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57", "YPS128","YPS163")
strains = my.strains; #just to make old code compatible.
report = data.frame(cbind(my.strains))
report$samplesize = NA; report$R=NA; report$t0=NA; report$n=NA; report$G=NA; report$longfilename=NA;
i=2
tb = read.csv( paste("rls/",files[i],sep=''), header=F)
GompFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'weibull')
#str(GompFlex)
GompFlex$res
GompFlex$res.t
GompFlex$opt$hessian
#str(WeibFlex)
for( i in 1:length(report[,1])){
#for( i in 3:4){
tb = read.csv( paste("rls/",files[i],sep=''))
report$samplesize[i] = length(tb[,1])
GompFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(tb[,1])
report$stdLS[i] =  sd(tb[,1])
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
lifespan=tb[,1],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-3, 1, 2), upper=c(0.1,200,10) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$G[i] = (report$n[i] - 1)/report$t0[i]
}
for( i in 1:length(report[,1])){
#for( i in 3:4){
my.files = files[grep(my.strains[i], files)]
tb = read.table( paste("rls",my.files[i],sep=''), sep="\t")
if( length(my.files)> 1){
for( fi in 2:length(my.files)) {
tmp.tb = read.table( paste("../qinlab_rls/",my.files[fi],sep=''), sep="\t")
tb = rbind( tb, tmp.tb)
}
}
ret = calculate.s(tb[,1])
plot( ret$s ~ ret$t, main=strains[i]);
print (report[i,  ]);
print (report[i, c("R", "t0", "n", "G")] );
t = seq(0,max(ret$t*1.1));
# s = exp( (R t0/n)*(1 - (1+t/t0)^n ) )
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
lines(s ~ t, col='red')
}
for( i in 1:length(report[,1])){
#for( i in 3:4){
my.files = files[grep(my.strains[i], files)]
tb = read.table( paste("rls/",my.files[i],sep=''), sep="\t")
if( length(my.files)> 1){
for( fi in 2:length(my.files)) {
tmp.tb = read.table( paste("../qinlab_rls/",my.files[fi],sep=''), sep="\t")
tb = rbind( tb, tmp.tb)
}
}
ret = calculate.s(tb[,1])
plot( ret$s ~ ret$t, main=strains[i]);
print (report[i,  ]);
print (report[i, c("R", "t0", "n", "G")] );
t = seq(0,max(ret$t*1.1));
# s = exp( (R t0/n)*(1 - (1+t/t0)^n ) )
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
lines(s ~ t, col='red')
}
for( i in 1:length(report[,1])){
#for( i in 3:4){
my.files = files[grep(my.strains[i], files)]
tb = read.table( paste("rls/",files[i],sep=''), sep="\t")
if( length(my.files)> 1){
for( fi in 2:length(my.files)) {
tmp.tb = read.table( paste("../qinlab_rls/",my.files[fi],sep=''), sep="\t")
tb = rbind( tb, tmp.tb)
}
}
ret = calculate.s(tb[,1])
plot( ret$s ~ ret$t, main=strains[i]);
print (report[i,  ]);
print (report[i, c("R", "t0", "n", "G")] );
t = seq(0,max(ret$t*1.1));
# s = exp( (R t0/n)*(1 - (1+t/t0)^n ) )
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
lines(s ~ t, col='red')
}
files
for( i in 1:length(report[,1])){
#for( i in 3:4){
tb = read.table( paste("rls/",files[i],sep=''), sep="\t")
if( length(my.files)> 1){
for( fi in 2:length(my.files)) {
tmp.tb = read.table( paste("../qinlab_rls/",my.files[fi],sep=''), sep="\t")
tb = rbind( tb, tmp.tb)
}
}
ret = calculate.s(tb[,1])
plot( ret$s ~ ret$t, main=strains[i]);
print (report[i,  ]);
print (report[i, c("R", "t0", "n", "G")] );
t = seq(0,max(ret$t*1.1));
# s = exp( (R t0/n)*(1 - (1+t/t0)^n ) )
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
lines(s ~ t, col='red')
}
View(ret)
View(report)
View(ret)
View(report)
