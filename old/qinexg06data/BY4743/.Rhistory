ls()
tb.mle.out.s
mean(tb.mle.out.s)
sd(tb.mle.out.s);
help(mean);
mean(tb.mle.out.s)
rls
tb
tb = read.table("rls.tab", header=T);
system("/tmp/fitgompertz.00.r");
source("/tmp/fitgompertz.00.r");
op1 = fitgompertz( tb[,1]);
fitgompertz <- function( rls ) {
 data = rls;
 lh.gomp <- function( par ) {
   my.data = data[!is.na(data)];
   I = par[1];
   G = par[2];
   s = exp( (I/G) *(1 - exp(G* my.data)) )  ;    # print( s );
   m = I * exp( G * my.data );    # print( m);
   my.lh = log(s) + log(m);
   ret <- - sum( my.lh);
 }
 # calculate the initial values
 tmp.fit = survfit( Surv(rls) );
 s = c( 1, tmp.fit$surv );
 t = c( 0, tmp.fit$time )
 fm <- gnls( s ~ exp( (I/G)* ( 1 - exp(G * t))),start = list( I = 0.001, G = 0.2));
 I.0 <- fm$coefficients[1];
 G.0 <- fm$coefficients[2];  
 start= list( I=I.0, G=G.0);
 op = optim( start, lh.gomp, hessian=T );
 sds = sqrt(diag(solve(op$hessian)));
 structure( list(estimate=op$par, sd=sds))
}
op1 = fitgompertz( tb[,1]);
library(survival);
library(nlme);
op1 = fitgompertz( tb[,1]);
op1
op2 = fitgompertz( tb[,1]);
op2
op2 = fitgompertz( tb[,2]);
op2
op3 = fitgompertz( tb[,3]);
summary(tb);
tb[1:5,]
op1 = fitgompertz( tb[,1]);
op2 = fitgompertz( tb[,2]);
op3 = fitgompertz( tb[,3]);
s
 fm <- gnls( s ~ exp( (I/G)* ( 1 - exp(G * t))),start = list( I = 0.001, G = 0.2));
fm
summary(fm);
op1
ks.test( tb[,1], tb[,3]);
ks.test( tb[,1], tb[,2]);
ks.test( tb[,3], tb[,2]);
