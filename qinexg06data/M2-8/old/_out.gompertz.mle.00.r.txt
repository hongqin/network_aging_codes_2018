
R : Copyright 2004, The R Foundation for Statistical Computing
Version 1.9.0  (2004-04-12), ISBN 3-900051-00-3

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for a HTML browser interface to help.
Type 'q()' to quit R.

	UTF-8 locales are not currently supported

> #040405Mon
> 
> library(nlme); library(survival);
> 
> ###Gompertzian survival model
> # surival chance
> gomp.s <- function( I, G, t ) {
+ #   tmp1 = 1 - exp( G * t );
+    ret <- exp( (I/G) *(1 - exp(G*t)) )  ;
+ }
> 
> gomp.3p.s <- function( I,G,M, t) {
+ # tmp1 = -M*t
+  #tmp2 = (I/G)
+  exp( -M * t + (I/G)*(1- exp(G*t)))
+ }
> 
> #mortality rate
> gompertiz.mortality.rate <- function( I, G, t) { ret <- I * exp(G *t) } 
> gomp.3p.m <- function( I,G,M,t) { I * exp(G*t) + M }
> 
> #log desity function of death
> log.density.death <- function( age, I, G ) {
+    s = gompertz.viability ( I, G, age);
+    m = gompertiz.mortality.rate (I, G, t) 
+    ret <-  log(s) + log( m )
+ }
> 
> #likelihood function by density
> lh.gomp <- function( data, I, G ) {
+    my.data = data[!is.na(data)];
+    s = exp( (I/G) *(1 - exp(G* my.data)) )  ;    # print( s );
+    m = I * exp( G * my.data );    # print( m);
+    my.lh = log(s) + log(m);
+    ret <- sum( my.lh);
+ }
> 
> #likelihood function by survival function
> lh.gomp.s <- function( data, I, G ) {
+    my.data = data[!is.na(data)];
+    #s = exp( (I/G) *(1 - exp(G* my.data)) )  ;     print( s );
+    s1 = exp( (I/G) *(1 - exp(G* (my.data-0.5))) )  ;     # print( s1 );
+    s2 = exp( (I/G) *(1 - exp(G* (my.data+0.5))) )  ;     # print( s2 );
+    my.lh = log(s1 - s2)
+    ret <- sum( my.lh);
+ }
> 
> ###end of Gompertzain model###
> 
> tb = read.table( "bootstrap.rls.tab", header=F );
> col.num.in = length( tb[1,] );
> tb.mle.out.d = data.frame( matrix(ncol=5, nrow=col.num.in ) );
> names( tb.mle.out.d ) = c("I.mle", "I.0", "G.mle", , "G.0", "lh.max" );
> tb.mle.out.s = tb.mle.out.d;
> 
> for ( k in 1:col.num.in ) {
+  rls = tb[ , k ];
+  # calculate the initial values
+  tmp.fit = survfit( Surv(rls) );
+  s = c( 1, tmp.fit$surv );
+  t = c( 0, tmp.fit$time );
+  fm <- gnls( s ~ exp( (I/G)* ( 1 - exp(G * t))),start = list( I = 0.001, G = 0.2));
+  I.0 <- fm$coefficients[1];
+  G.0 <- fm$coefficients[2];  
+ 
+  lh.gomp.0 = lh.gomp( rls, I.0, G.0);
+  lh.gomp.0;
+  lh.gomp.0s = lh.gomp.s( rls, I.0, G.0);
+  lh.gomp.0s;
+ 
+ 
+  #define the search space 
+  I.range = c( 0, min(10 * I.0, 0.1) );
+  G.range = c( 0, min( 3* G.0, 0.5 ) );
+  I.itr = 1000;
+  G.itr = 200;
+  I.step = ( I.range[2] - I.range[1] ) / I.itr;
+  G.step = ( G.range[2] - G.range[1] ) / G.itr; 
+ 
+  Is = seq( I.step, I.range[2], length= I.itr );
+  Gs = seq( G.step, G.range[2], length= G.itr );
+  lh.mat = matrix( data=NA, nrow=I.itr, ncol=G.itr );
+ 
+  lh.max = -Inf;
+  I.max = NA;
+  G.max = NA;
+ 
+  for ( i in 1:I.itr  ) {
+    for ( j in 1:G.itr  ) {
+      lh.mat[i,j] = lh.gomp( rls, Is[i], Gs[j] );
+      if ( lh.mat[i,j] >= lh.max ) {
+ 	 lh.max = lh.mat[i, j];
+ 	 I.max = i;
+ 	 G.max = j;
+      } 
+    }
+  }
+ 
+  max( lh.mat );
+  lh.max; I.max; G.max;
+  tb.mle.out.d [k, ] = c(Is[I.max], I.0, Gs[G.max], G.0, lh.max ); ####
+ 
+  print ( k ); 
+ 
+  #Now try mle by survival function
+ 
+  lh.mat.s = matrix( data=NA, nrow=I.itr, ncol=G.itr );
+  lh.max.s = -Inf;
+  I.max.s = NA;
+  G.max.s = NA;
+ 
+  for ( i in 1:I.itr  ) {
+   for ( j in 1:G.itr  ) {
+     lh.mat.s[i,j] = lh.gomp.s( rls, Is[i], Gs[j] );
+     if ( lh.mat.s[i,j] >= lh.max.s ) {
+ 	lh.max.s = lh.mat.s[i, j];
+ 	I.max.s = i;
+ 	G.max.s = j;
+     } 
+   }
+   }
+ 
+  max( lh.mat.s );
+  c(lh.max.s, I.max.s, G.max.s, Is[I.max.s], I.0, Gs[G.max.s], G.0); 
+  c(lh.max, I.max, G.max, Is[I.max], I.0, Gs[G.max], G.0); 
+ 
+  tb.mle.out.s [k, ] = c(Is[I.max.s], I.0, Gs[G.max.s], G.0, lh.max.s ); ####
+ 
+  print ( k ); 
+ } # end of k loop
[1] 1
[1] 1
[1] 2
[1] 2
[1] 3
[1] 3
[1] 4
[1] 4
[1] 5
[1] 5
[1] 6
[1] 6
[1] 7
[1] 7
[1] 8
[1] 8
[1] 9
[1] 9
[1] 10
[1] 10
[1] 11
[1] 11
[1] 12
[1] 12
[1] 13
[1] 13
[1] 14
[1] 14
[1] 15
[1] 15
[1] 16
[1] 16
[1] 17
[1] 17
[1] 18
[1] 18
[1] 19
[1] 19
[1] 20
[1] 20
[1] 21
[1] 21
[1] 22
[1] 22
[1] 23
[1] 23
[1] 24
[1] 24
[1] 25
[1] 25
[1] 26
[1] 26
[1] 27
[1] 27
[1] 28
[1] 28
[1] 29
[1] 29
[1] 30
[1] 30
[1] 31
[1] 31
[1] 32
[1] 32
[1] 33
[1] 33
[1] 34
[1] 34
[1] 35
[1] 35
[1] 36
[1] 36
[1] 37
[1] 37
[1] 38
[1] 38
[1] 39
[1] 39
[1] 40
[1] 40
[1] 41
[1] 41
[1] 42
[1] 42
[1] 43
[1] 43
[1] 44
[1] 44
[1] 45
[1] 45
[1] 46
[1] 46
[1] 47
[1] 47
[1] 48
[1] 48
[1] 49
[1] 49
[1] 50
[1] 50
[1] 51
[1] 51
[1] 52
[1] 52
[1] 53
[1] 53
[1] 54
[1] 54
[1] 55
[1] 55
[1] 56
[1] 56
[1] 57
[1] 57
[1] 58
[1] 58
[1] 59
[1] 59
[1] 60
[1] 60
[1] 61
[1] 61
[1] 62
[1] 62
[1] 63
[1] 63
[1] 64
[1] 64
[1] 65
[1] 65
[1] 66
[1] 66
[1] 67
[1] 67
[1] 68
[1] 68
[1] 69
[1] 69
[1] 70
[1] 70
[1] 71
[1] 71
[1] 72
[1] 72
[1] 73
[1] 73
[1] 74
[1] 74
[1] 75
[1] 75
[1] 76
[1] 76
[1] 77
[1] 77
[1] 78
[1] 78
[1] 79
[1] 79
[1] 80
[1] 80
[1] 81
[1] 81
[1] 82
[1] 82
[1] 83
[1] 83
[1] 84
[1] 84
[1] 85
[1] 85
[1] 86
[1] 86
[1] 87
[1] 87
[1] 88
[1] 88
[1] 89
[1] 89
[1] 90
[1] 90
[1] 91
[1] 91
[1] 92
[1] 92
[1] 93
[1] 93
[1] 94
[1] 94
[1] 95
[1] 95
[1] 96
[1] 96
[1] 97
[1] 97
[1] 98
[1] 98
[1] 99
[1] 99
[1] 100
[1] 100
> 
> write.table( tb.mle.out.d, "den-mle.out.bootstrap.rls.tab", sep="\t", row.names=F,col.name=T );
> write.table( tb.mle.out.s, "sur-mle.out.bootstrap.rls.tab", sep="\t", row.names=F,col.name=T );
> 
> ### mle by density results
> summary( tb.mle.out.d );
     I.mle               I.0               G.mle             G.0         
 Min.   :0.002464   Min.   :0.001856   Min.   :0.0976   Min.   :0.09876  
 1st Qu.:0.003547   1st Qu.:0.003014   1st Qu.:0.1102   1st Qu.:0.12179  
 Median :0.004230   Median :0.003679   Median :0.1170   Median :0.13210  
 Mean   :0.004307   Mean   :0.003825   Mean   :0.1174   Mean   :0.13172  
 3rd Qu.:0.005043   3rd Qu.:0.004533   3rd Qu.:0.1244   3rd Qu.:0.14100  
 Max.   :0.006945   Max.   :0.007632   Max.   :0.1413   Max.   :0.16290  
     lh.max      
 Min.   :-386.3  
 1st Qu.:-376.9  
 Median :-372.7  
 Mean   :-372.7  
 3rd Qu.:-368.9  
 Max.   :-360.4  
> sd( tb.mle.out.d );
      I.mle         I.0       G.mle         G.0      lh.max 
0.000930933 0.001146269 0.008817119 0.013957051 5.485305903 
> 
> ### mle by survival curve  results
> summary( tb.mle.out.s );
     I.mle               I.0               G.mle             G.0         
 Min.   :0.002464   Min.   :0.001856   Min.   :0.0976   Min.   :0.09876  
 1st Qu.:0.003534   1st Qu.:0.003014   1st Qu.:0.1106   1st Qu.:0.12179  
 Median :0.004197   Median :0.003679   Median :0.1176   Median :0.13210  
 Mean   :0.004284   Mean   :0.003825   Mean   :0.1176   Mean   :0.13172  
 3rd Qu.:0.005006   3rd Qu.:0.004533   3rd Qu.:0.1246   3rd Qu.:0.14100  
 Max.   :0.006945   Max.   :0.007632   Max.   :0.1413   Max.   :0.16290  
     lh.max      
 Min.   :-386.3  
 1st Qu.:-376.9  
 Median :-372.7  
 Mean   :-372.7  
 3rd Qu.:-368.9  
 Max.   :-360.4  
> sd( tb.mle.out.s );
       I.mle          I.0        G.mle          G.0       lh.max 
0.0009310404 0.0011462687 0.0088765174 0.0139570508 5.4895770836 
> 
> quit( "yes" );
