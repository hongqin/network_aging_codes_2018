"GompLogLikFlex",  "GompAICFlex",  "WeibShapeFlex",  "WeibRateFlex",
"WeibLogLikFlex",  "WeibAICFlex"  )];
BootstrapMean
BootstrapMeanPublishing = data.frame( BootstrapMean[, c("my.strains")] )
BootstrapMeanPublishing$RwithStd = as.vector( paste(round(BootstrapMean$R, 4), round(BootstrapMean$Rstd,4), sep=" +/- ") );
BootstrapMeanPublishing$t0withStd = as.vector( paste(round(BootstrapMean$t0, 1), round(BootstrapMean$t0std,1), sep=" +/- ") );
BootstrapMeanPublishing$nwithStd = as.vector( paste(round(BootstrapMean$n, 1), round(BootstrapMean$nstd,3), sep=" +/- ") );
BootstrapMeanPublishing$GwithStd = as.vector( paste(round(BootstrapMean$G, 2), round(BootstrapMean$Gstd,3), sep=" +/- ") );
BootstrapMeanPublishing$GompRFlexwithStd = as.vector( paste(round(BootstrapMean$GompRFlex, 3), round(BootstrapMean$GompRFlexStd,3), sep=" +/- ") );
BootstrapMeanPublishing$GompGFlexwithStd = as.vector( paste(round(BootstrapMean$GompGFlex, 2), round(BootstrapMean$GompGFlexStd,3), sep=" +/- ") );
BootstrapMeanPublishing$avgLSwithStd = as.vector( paste(round(BootstrapMean$avgLS, 2), round(BootstrapMean$avgLSstd,3), sep=" +/- ") );
BootstrapMeanPublishing
write.csv(BootstrapMean, file='sandbox/_Kaberlein04_Bootstrap_summary.csv', row.names = FALSE)
write.csv(BootstrapMeanPublishing, file='sandbox/_Kaberlein04_Bootstrap_summary_Publications.csv', row.names = FALSE)
View(BootstrapMeanPublishing)
##### log likelihood function, R-fixed 2-parameter binomial mortality rate model
# http://hongqinlab.blogspot.com/2013/12/binomial-mortailty-model.html
# m = R ( 1 + t/t0)^(n-1)
# s = exp( (R t0/n)*(1 - (1+t/t0)^n ) )
llh.binomialMortality.single.run.NoR0 <- function( Rt0n, lifespan, debug=0 ) {
I = R0;
t0 = Rt0n[2]; n=Rt0n[3];
my.data = lifespan[!is.na(lifespan)];
log_s = (I * t0 /n )*(1 - (1 + my.data/t0)^n);
log_m = log(I) +  (n-1) * log(1 + my.data/t0 );
my.lh = sum(log_s)  + sum(log_m);
if(debug) { print (Rt0n ); } #trace the convergence
ret = - my.lh # because optim seems to maximize
}
?optim
rm(list=ls())
#setwd("~/github/0.network.aging.prj.bmc/0a.rls.fitting")
setwd("~/github/bmc_netwk_aging_manuscript/R1/0.nat.rls.fitting")
library('flexsurv')
source("../lifespan.r")
##### log likelihood function, R-fixed 2-parameter binomial mortality rate model
# http://hongqinlab.blogspot.com/2013/12/binomial-mortailty-model.html
# m = R ( 1 + t/t0)^(n-1)
# s = exp( (R t0/n)*(1 - (1+t/t0)^n ) )
llh.binomialMortality.single.run.NoR0 <- function( Rt0n, lifespan, debug=0 ) {
I = R0;
t0 = Rt0n[2]; n=Rt0n[3];
my.data = lifespan[!is.na(lifespan)];
log_s = (I * t0 /n )*(1 - (1 + my.data/t0)^n);
log_m = log(I) +  (n-1) * log(1 + my.data/t0 );
my.lh = sum(log_s)  + sum(log_m);
if(debug) { print (Rt0n ); } #trace the convergence
ret = - my.lh # because optim seems to maximize
}
set.seed(20170101)
#files = list.files(path="../qinlab_rls/", pattern="rls.tab")
#tmp1 = gsub("\\d{6}.", "", files)
#redundant_strains = gsub(".rls.tab", "", tmp1)
#strains = sort( unique( redundant_strains ))
#strains
my.strains=c("101S", "M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57", "YPS128","YPS163")
#files2=c();
#for( i in 1:length(my.strains)){
# files2 = c( files2, files[grep(my.strains[i], files)]);
#}
report = data.frame(cbind(my.strains))
report$samplesize = NA; report$R=NA; report$t0=NA; report$n=NA; report$G=NA; report$longfilename=NA;
for( i in 1:length(report[,1])){
#for( i in 3:4){
filename = paste("rls/", my.strains[i], ".csv", sep='' );
report$longfilename[i] = filename;
tb = read.csv( filename, header =F)
report$samplesize[i] = length(tb[,1])
GompFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(tb[,1])
report$stdLS[i] =  sd(tb[,1])
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
#fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
R0 = Rhat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run.NoR0,
lifespan=tb[,1],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-3, 1, 2), upper=c(0.1,200,10) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$G[i] = (report$n[i] - 1)/report$t0[i]
}
#report[ grep("tBY", report$strains), ]
report
summary(report[, c("avgLS", "t0", "n")])
for( i in 1:length(my.strains)){
#for( i in 3:4){
filename = paste("rls/", my.strains[i], ".csv", sep='' );
tb = read.csv( filename, header =F)
ret = calculate.s(tb[,1])
plot( ret$s ~ ret$t, main=my.strains[i]);
print (report[i,  ]);
#overlay binomial aging viability
print (report[i, c("R", "t0", "n", "G")] );
t = seq(0,max(ret$t*1.1));
# s = exp( (R t0/n)*(1 - (1+t/t0)^n ) )
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
lines(s ~ t, col='red')
#overlay gompertz  viability
s.g =  G.s( c(report$GompRFlex[i], report$GompGFlex[i], 0), t )
lines(s.g ~ t, col='blue')
}
report
set.seed(20170101)  #remove to test for different bootstraps
llh.binomialMortality.single.run.NoR0 <- function( Rt0n, lifespan, debug=0 ) {
I = R0;
t0 = Rt0n[2]; n=Rt0n[3];
my.data = lifespan[!is.na(lifespan)];
log_s = (I * t0 /n )*(1 - (1 + my.data/t0)^n);
log_m = log(I) +  (n-1) * log(1 + my.data/t0 );
my.lh = sum(log_s)  + sum(log_m);
if(debug) { print (c(I, Rt0n )); } #trace the convergence
ret = - my.lh # because optim seems to maximize
}
rm(list=ls())
host = "Applejack" #"Ridgeside"
if (host == "AppleJack") {
setwd("/Users/hqin/github/bmc_netwk_aging_manuscript/R1/0.nat.rls.fitting");
}
if (host == "Ridgeside") {
setwd("/home/hqin/github/bmc_netwk_aging_manuscript/R1/0.nat.rls.fitting");
}
library('flexsurv')
source("lifespan.r")
set.seed(20170101)  #remove to test for different bootstraps
llh.binomialMortality.single.run.NoR0 <- function( Rt0n, lifespan, debug=0 ) {
I = R0;
t0 = Rt0n[2]; n=Rt0n[3];
my.data = lifespan[!is.na(lifespan)];
log_s = (I * t0 /n )*(1 - (1 + my.data/t0)^n);
log_m = log(I) +  (n-1) * log(1 + my.data/t0 );
my.lh = sum(log_s)  + sum(log_m);
if(debug) { print (c(I, Rt0n )); } #trace the convergence
ret = - my.lh # because optim seems to maximize
}
RUNS = 100; #bootstrap runs
#files = list.files(path="../qinlab_rls/", pattern="rls.tab")
#tmp1 = gsub("\\d{6}.", "", files)
#redundant_strains = gsub(".rls.tab", "", tmp1)
##strains = sort( unique( redundant_strains ))
#strains
my.strains=c("101S", "M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57", "YPS128","YPS163")
#files2=c();
#for( i in 1:length(my.strains)){
# files2 = c( files2, files[grep(my.strains[i], files)]);
#}
report = data.frame(cbind(my.strains))
report$samplesize = NA; report$R=NA; report$t0=NA; report$n=NA; report$G=NA; report$longfilename=NA;
#files = files2;
#strains = my.strains;
for( BootstrapCount in 1:RUNS ) {#!!!!!!
for( i in 1:length(report[,1])){
#for( i in 3:4){
#my.files = files[grep(strains[i], files)]
filename = paste("rls/", my.strains[i], ".csv", sep='' );
report$longfilename[i] = filename;
tb = read.csv( filename, header= F)
report$samplesize[i] = length(tb[,1])
#boostrap
tb[,1] = sample(tb[,1], replace=TRUE); # BOOTSTRAP HERE
GompFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(tb[,1])
report$stdLS[i] =  sd(tb[,1])
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
R0 = Rhat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run.NoR0,
lifespan=tb[,1],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-3, 1, 2), upper=c(0.1,200,100) );
report[i, c("R", "t0", "n")] = c( R0, fitBinom$par[2:3])
report$G[i] = (report$n[i] - 1)/report$t0[i]
#fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
#                   lifespan=tb[,1],
#                   #method='SANN') #SANN needs control
#                   method="L-BFGS-B",
#                   lower=c(1E-10, 1, 4), upper=c(1,200,20) );
#report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
#report$G[i] = (report$n[i] - 1)/report$t0[i]
}#i loop
report$BestModel = ifelse(report$GompAICFlex < report$WeibAICFlex, "Gomp", "Weib")
report$BestModel = ifelse(abs(report$GompAICFlex - report$WeibAICFlex)<2, "<2", report$BestModel)
outname = paste("bootstrap/", BootstrapCount, ".csv", sep='');
write.csv(report, file = outname, row.names = FALSE);
}#end of boostrap loop
BootstrapMean = report;
BootstrapStd = report;
rownames = names(report);
for( col in 2:length(report[1,])) {
for ( row in 1:length(report[,1])) {
buffer = c();
for( BootstrapCount in 1:RUNS ) {
filename = paste("bootstrap/", BootstrapCount, ".csv", sep='');
tb = read.csv(filename)
if( rownames[col] == "BestModel" ) {
buffer = as.character( c(buffer, as.character(tb[row,col])) );
} else {
buffer = c(buffer, tb[row, col]);
}
}
if( rownames[col] == "BestModel" ) {
tmp = table( buffer );
BootstrapMean[row,col] = paste(names(tmp), tmp, sep="=", collapse = ":");
} else {
BootstrapMean[row,col] = mean(buffer);
BootstrapStd[row,col] = sqrt(var(buffer));
}
}
}
BootstrapMean
summary(BootstrapMean$n)
BootstrapStd
BootstrapMean$Rstd = BootstrapStd$R
BootstrapMean$t0std = BootstrapStd$t0
BootstrapMean$nstd = BootstrapStd$n
BootstrapMean$Gstd = BootstrapStd$G
BootstrapMean$avgLSstd = BootstrapStd$avgLS
names(BootstrapMean)
BootstrapMean = BootstrapMean[, c( "my.strains",  "samplesize",  "R", "Rstd",  "t0",  "t0std",  "n",  "nstd",   "G",
"Gstd", "avgLS",  "avgLSstd", "stdLS",   "BestModel",
"longfilename",   "CV",  "GompGFlex",  "GompRFlex",  "GompLogLikFlex",
"GompAICFlex",  "WeibShapeFlex",  "WeibRateFlex",  "WeibLogLikFlex",  "WeibAICFlex"  )];
BootstrapMean
BootstrapMeanPublishing = data.frame( BootstrapMean[, c("my.strains")] )
BootstrapMeanPublishing$RwithStd = as.vector( paste(round(BootstrapMean$R, 4), round(BootstrapMean$Rstd,4), sep=" +/- ") );
BootstrapMeanPublishing$t0withStd = as.vector( paste(round(BootstrapMean$t0, 1), round(BootstrapMean$t0std,1), sep=" +/- ") );
BootstrapMeanPublishing$nwithStd = as.vector( paste(round(BootstrapMean$n, 1), round(BootstrapMean$nstd,3), sep=" +/- ") );
BootstrapMeanPublishing$GwithStd = as.vector( paste(round(BootstrapMean$G, 2), round(BootstrapMean$Gstd,3), sep=" +/- ") );
BootstrapMeanPublishing$avgLSwithStd = as.vector( paste(round(BootstrapMean$avgLS, 2), round(BootstrapMean$avgLSstd,3), sep=" +/- ") );
BootstrapMeanPublishing
write.csv(BootstrapMean, file="sandbox/Bootstrap_summary_fixedR0.csv", row.names = FALSE)
write.csv(BootstrapMeanPublishing, file="sandbox/Bootstrap_summary_for_publication_fixedR0.csv", row.names = FALSE)
p = 0.7
BootstrapMean$One.over.lambdaP07 = BootstrapMean$t0 * p/ (1-p)
BootstrapMean[, c("t0", "One.over.lambdaP07")]
hist(BootstrapMean$One.over.lambdaP07, br=20, xlim=c(60,190), xlab=expression(paste("1/",lambda) ), main=expression(paste("Histogram of 1/",lambda, " when p=0.7")))
p = 0.9
BootstrapMean$One.over.lambdaP09 = BootstrapMean$t0 * p/ (1-p)
BootstrapMean[, c("t0", "One.over.lambdaP09")]
hist(BootstrapMean$One.over.lambdaP09, br=20, xlim=c(200,800), xlab=expression(paste("1/",lambda) ), main=expression(paste("Histogram of 1/",lambda, " when p=0.9")))
# BootstrapMean
summary(lm(log10(BootstrapMean$GompRFlex) ~ BootstrapMean$GompGFlex))
summary(lm(log10(BootstrapMean$R) ~ BootstrapMean$GompGFlex))
summary(lm(log10(BootstrapMean$R) ~ BootstrapMean$G)) #G from t0 and n
summary(lm(log10(BootstrapMean$GompGFlex) ~ BootstrapMean$t0)) #G from t0 and n
summary(lm(log10(BootstrapMean$R) ~ BootstrapMean$n)) #G from t0 and n
summary(lm( BootstrapMean$GompGFlex ~ BootstrapMean$t0 ))
summary(lm(log10(BootstrapMean$GompRFlex) ~ BootstrapMean$t0 ))
summary(lm(log10(BootstrapMean$GompRFlex) ~ BootstrapMean$GompGFlex ))
summary(lm(log10(BootstrapMean$GompGFlex) ~ BootstrapMean$t0 + log10(BootstrapMean$GompRFlex)))
summary(lm(log10(BootstrapMean$GompRFlex) ~ BootstrapMean$t0 + log10(BootstrapMean$GompGFlex))) #not significant.
my.strains
my.strains == "M8"
my.strains == 'M8'
optim
optimHess()
?optimHess
##### log likelihood function, R-fixed 2-parameter binomial mortality rate model
# http://hongqinlab.blogspot.com/2013/12/binomial-mortailty-model.html
# m = R ( 1 + t/t0)^(n-1)
# s = exp( (R t0/n)*(1 - (1+t/t0)^n ) )
llh.binomialMortality.single.run.NoR0 <- function( Rt0n, lifespan, debug=0 ) {
I = R0;
t0 = Rt0n[2]; n=Rt0n[3];
my.data = lifespan[!is.na(lifespan)];
log_s = (I * t0 /n )*(1 - (1 + my.data/t0)^n);
log_m = log(I) +  (n-1) * log(1 + my.data/t0 );
my.lh = sum(log_s)  + sum(log_m);
if(debug) { print (c(I, Rt0n )); } #trace the convergence
ret = - my.lh # because optim seems to maximize
}
llh.binomialMortality.single.run.FixedN <- function( Rt0n, lifespan, debug=0 ) {
I=Rt0n[1]; t0 = Rt0n[2]; #n=Rt0n[3]; n defined outside
my.data = lifespan[!is.na(lifespan)];
log_s = (I * t0 /n )*(1 - (1 + my.data/t0)^n);
log_m = log(I) +  (n-1) * log(1 + my.data/t0 );
my.lh = sum(log_s)  + sum(log_m);
if(debug) { print (c(I, Rt0n )); } #trace the convergence
ret = - my.lh # because optim seems to maximize
}
tb.ori = read.table("092304.merged.rls.csv", header = T, sep="\t")
#summary(tb.ori)
strains = names(tb.ori)
strains
my.strains = c("fig4b.BY4742.2glucose",  "fig4b.by4742.SIR2.ox.2glucose",  "fig2a.sir2", "fig2b.sir2",
"fig1b.BY4742", "fig1b.fob1","fig1b.hxk2","fig1b.fob1.hxk2"   )
tb = tb.ori[, my.strains]
report = data.frame(my.strains)
report$samplesize = NA; report$R=NA; report$t0=NA; report$n=NA; report$G=NA; #report$longfilename=NA;
i=2
GompFlex = flexsurvreg(formula = Surv(tb[,i]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,i]) ~ 1, dist = 'weibull')
#str(GompFlex)
GompFlex$res
GompFlex$res.t
GompFlex$opt$hessian
#str(WeibFlex)
?flexsurvreg
flexsurvreg
##' ## should give same answer
library(flexsurv)
flexsurvreg
hexp2 <- function(x, rate=1){ rate } # exponential distribution
hexp2 <- Vectorize(hexp2)
custom.exp2 <- list(name="exp2", pars=c("rate"), location="rate",
transforms=c(log), inv.transforms=c(exp),
inits=function(t)1/mean(t))
flexsurvreg(Surv(futime, fustat) ~ 1, data = ovarian, dist=custom.exp2)
ovarian
flexsurvreg(Surv(futime, fustat) ~ 1, data = ovarian, dist=custom.exp2)
flexsurvreg(Surv(futime, fustat) ~ 1, data = ovarian, dist="exp")
for( i in 1:length(report[,1])){
#report$samplesize[i] = length(tb[,i])
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
ret = calculate.s(my.data)
plot( ret$s ~ ret$t, main=my.strains[i]);
print (report[i,  ]);
}
for( i in 1:length(report[,1])){
#report$samplesize[i] = length(tb[,i])
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
ret = calculate.s(my.data)
plot( ret$s ~ ret$t, main=my.strains[i]);
print (report[i,  ]);
#overlay binomial aging viability
print (report[i, c("R", "t0", "n", "G")] );
t = seq(0,max(ret$t*1.1));
# s = exp( (R t0/n)*(1 - (1+t/t0)^n ) )
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
lines(s ~ t, col='red')
#overlay gompertz  viability
s.g =  G.s( c(report$GompRFlex[i], report$GompGFlex[i], 0), t )
lines(s.g ~ t, col='blue')
}
i =1
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
h = histo(my.data)
h = hist(my.data)
h
plot(h)
h = hist(my.data)
t
match( c('red'), c('red'))
match( c('red'), c('green'))
for( i in 1:length(report[,1])){
#report$samplesize[i] = length(tb[,i])
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
h= hist(my.data)
plot(h, density = T)
t= seq(0, max(h$mids), by=0.1)
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
m = report$R[i]*(1 + t/ report$t0[i])^(report$n[i] -1 )
pdf = s*m
lines( pdf ~ t, col='red')
}
?hist
for( i in 1:length(report[,1])){
#report$samplesize[i] = length(tb[,i])
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
h= hist(my.data)
plot(h, freq=F)
t= seq(0, max(h$mids), by=0.1)
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
m = report$R[i]*(1 + t/ report$t0[i])^(report$n[i] -1 )
pdf = s*m
lines( pdf ~ t, col='red')
}
h= hist(my.data)
plot(h, freq=F)
t= seq(0, max(h$mids), by=0.1)
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
m = report$R[i]*(1 + t/ report$t0[i])^(report$n[i] -1 )
pdf = s*m
lines( pdf ~ t, col='red')
pdf
s
m
t
my.data
hist(my.data,freq=F)
for( i in 1:length(report[,1])){
#report$samplesize[i] = length(tb[,i])
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
h= hist(my.data)
plot( h$density ~ h$mids, main=my.strains[i])
t= seq(0, max(h$mids), by=0.1)
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
m = report$R[i]*(1 + t/ report$t0[i])^(report$n[i] -1 )
pdf = s*m
lines( pdf ~ t, col='red')
}
rm(list=ls())
host = "Applejack" #"Ridgeside"
if (host == "AppleJack") {
setwd("~/github/bmc_netwk_aging_manuscript/R1/1.kaeberlein04plos")
}
if (host == "Ridgeside") {
}
library('flexsurv')
library('stringr')
source("../lifespan.r")
list.files()
tb.ori = read.table("092304.merged.rls.csv", header = T, sep="\t")
#summary(tb.ori)
strains = names(tb.ori)
strains
my.strains = c("fig4b.BY4742.2glucose",  "fig4b.by4742.SIR2.ox.2glucose",  "fig2a.sir2", "fig2b.sir2",              "fig1b.BY4742", "fig1b.fob1","fig1b.hxk2","fig1b.fob1.hxk2"   )
#my.strains = strains
tb = tb.ori[, my.strains]
report = data.frame(my.strains)
report$samplesize = NA; report$R=NA; report$t0=NA; report$n=NA; report$G=NA; #report$longfilename=NA;
for( i in 1:length(report[,1])){
#report$samplesize[i] = length(tb[,i])
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
report$samplesize[i] = length(my.data)
GompFlex = flexsurvreg(formula = Surv(tb[,i]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,i]) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(tb[,i], na.rm=T)
report$stdLS[i] =  sd(tb[,i], na.rm = T)
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
lifespan=tb[,i],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-10, 1, 1), upper=c(1,200,20) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$G[i] = (report$n[i] - 1)/report$t0[i]
}
#report[ grep("tBY", report$strains), ]
report
write.csv(report, file = 'sandbox/_report_kaeberlein04_fit.csv', row.names = FALSE)
for( i in 1:length(report[,1])){
#report$samplesize[i] = length(tb[,i])
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
ret = calculate.s(my.data)
plot( ret$s ~ ret$t, main=my.strains[i]);
print (report[i,  ]);
#overlay binomial aging viability
print (report[i, c("R", "t0", "n", "G")] );
t = seq(0,max(ret$t*1.1), by=0.1);
# s = exp( (R t0/n)*(1 - (1+t/t0)^n ) )
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
lines(s ~ t, col='red')
#overlay gompertz  viability
s.g =  G.s( c(report$GompRFlex[i], report$GompGFlex[i], 0), t )
lines(s.g ~ t, col='blue')
}
for( i in 1:length(report[,1])){
#report$samplesize[i] = length(tb[,i])
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
h= hist(my.data, br=max(my.data)/2)
plot( h$density ~ h$mids, main=my.strains[i], xlab="RLS",ylab="density")
t= seq(0, max(h$mids), by=0.1)
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
m = report$R[i]*(1 + t/ report$t0[i])^(report$n[i] -1 )
pdf = s*m
lines( pdf ~ t, col='red')
s.g =  G.s( c(report$GompRFlex[i], report$GompGFlex[i]), t );
m.g =  report$GompRFlex[i]*exp(report$GompGFlex[i]*t)
pdf.g = s.g * m.g
lines( pdf.g ~ t, col="blue")
}
