pdf("kae04_plots.pdf", width=4, height =4 );
# pdf version, (x,y) are legend positions for plots
#x = c(0,    32,   0,     0,   32,   0,  0,    0   );
#y = c(0.07, 0.06, 0.12, 0.12,0.05, 0.04, 0.04, 0.031  );
for( i in 1:length(report[,1])){
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
h= hist(my.data, br=max(my.data)/2, plot = FALSE);
hist(my.data, probability = TRUE, col='gray', border='white', xlab='RLS', ylab='probability',
main=my.strains[i], ylim=c(0, max(h$density)*1.1), xlim=c(0, max(h$mids)*1.1))
#plot( h$density ~ h$mids, main=my.strains[i], xlab="RLS",ylab="density")
#par(new=TRUE);
t= seq(0, max(h$mids)*1.2, by=0.1)
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
m = report$R[i]*(1 + t/ report$t0[i])^(report$n[i] -1 )
pdf = s*m
lines( pdf ~ t, col='red', lty=1)
s.g =  G.s( c(report$GompRFlex[i], report$GompGFlex[i]), t );
m.g =  report$GompRFlex[i]*exp(report$GompGFlex[i]*t)
pdf.g = s.g * m.g
lines( pdf.g ~ t, col="blue", lty=2)
#  legend ( x[i], y[i], c("Binomial","Gompertz"), col=c("red","blue"), lty=c(1,2), cex=0.7 )
legend ( "topright", c("Binomial","Gompertz"), col=c("red","blue"), lty=c(1,2), cex=0.7 )
}
dev.off()
rm(list=ls())
library('flexsurv')
library('stringr')
source("../lifespan.r")
tb = read.csv("kaeberlein04_selected_strains.csv")
names(tb)
my.strains = c("BY4742", "sir2", "SIR2.ox", "fob1", "hxk2", "fob1 hxk2");
report = data.frame(my.strains)
report$samplesize = NA; report$R=NA; report$t0=NA; report$n=NA; report$G=NA; #report$longfilename=NA;
#write.csv(tb, "kaeberlein04_selected_strains.csv", row.names = FALSE, quote = FALSE)
for( i in 1:length(report[,1])){
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
report$samplesize[i] = length(my.data)
GompFlex = flexsurvreg(formula = Surv(tb[,i]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,i]) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(tb[,i], na.rm=T)
report$stdLS[i] =  sd(tb[,i], na.rm = T)
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
lifespan=tb[,i],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-10, 1, 1), upper=c(1,200,20) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$G[i] = (report$n[i] - 1)/report$t0[i]
}
report
write.csv(report, file = 'sandbox/_report_kaeberlein04_fit.csv', row.names = FALSE)
# html version, (x,y) are legend positions for plots
#x = c(0,    0,   0,     0,   40,   55,  50,   5);
#y = c(0.06, 0.06, 0.1, 0.1,0.04, 0.03, 0.03, 0.03  );
pdf("kae04_plots.pdf", width=4, height =4 );
# pdf version, (x,y) are legend positions for plots
#x = c(0,    32,   0,     0,   32,   0,  0,    0   );
#y = c(0.07, 0.06, 0.12, 0.12,0.05, 0.04, 0.04, 0.031  );
for( i in 1:length(report[,1])){
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
h= hist(my.data, br=max(my.data)/2, plot = FALSE);
hist(my.data, probability = TRUE, col='gray', border='white', xlab='RLS', ylab='probability',
main=my.strains[i], ylim=c(0, max(h$density)*1.1), xlim=c(0, max(h$mids)*1.1))
#plot( h$density ~ h$mids, main=my.strains[i], xlab="RLS",ylab="density")
#par(new=TRUE);
t= seq(0, max(h$mids)*1.2, by=0.1)
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
m = report$R[i]*(1 + t/ report$t0[i])^(report$n[i] -1 )
pdf = s*m
lines( pdf ~ t, col='red', lty=1)
s.g =  G.s( c(report$GompRFlex[i], report$GompGFlex[i]), t );
m.g =  report$GompRFlex[i]*exp(report$GompGFlex[i]*t)
pdf.g = s.g * m.g
lines( pdf.g ~ t, col="blue", lty=2)
#  legend ( x[i], y[i], c("Binomial","Gompertz"), col=c("red","blue"), lty=c(1,2), cex=0.7 )
legend ( "topright", c("Binomial","Gompertz"), col=c("red","blue"), lty=c(1,2), cex=0.7 )
}
dev.off()
rm(list=ls())
library('flexsurv')
library('stringr')
source("../lifespan.r")
tb = read.csv("kaeberlein04_selected_strains.csv")
names(tb)
my.strains = c("BY4742", "sir2", "SIR2.ox", "fob1", "hxk2", "fob1 hxk2");
report = data.frame(my.strains)
report$samplesize = NA; report$R=NA; report$t0=NA; report$n=NA; report$G=NA; #report$longfilename=NA;
#write.csv(tb, "kaeberlein04_selected_strains.csv", row.names = FALSE, quote = FALSE)
for( i in 1:length(report[,1])){
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
report$samplesize[i] = length(my.data)
GompFlex = flexsurvreg(formula = Surv(tb[,i]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,i]) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(tb[,i], na.rm=T)
report$stdLS[i] =  sd(tb[,i], na.rm = T)
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
lifespan=tb[,i],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-10, 1, 1), upper=c(1,200,20) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$G[i] = (report$n[i] - 1)/report$t0[i]
}
report
write.csv(report, file = 'sandbox/Kaeberlein04_singlefit.csv', row.names = FALSE)
# html version, (x,y) are legend positions for plots
#x = c(0,    0,   0,     0,   40,   55,  50,   5);
#y = c(0.06, 0.06, 0.1, 0.1,0.04, 0.03, 0.03, 0.03  );
pdf("kae04_plots.pdf", width=4, height =4 );
# pdf version, (x,y) are legend positions for plots
#x = c(0,    32,   0,     0,   32,   0,  0,    0   );
#y = c(0.07, 0.06, 0.12, 0.12,0.05, 0.04, 0.04, 0.031  );
for( i in 1:length(report[,1])){
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
h= hist(my.data, br=max(my.data)/2, plot = FALSE);
hist(my.data, probability = TRUE, col='gray', border='white', xlab='RLS', ylab='probability',
main=my.strains[i], ylim=c(0, max(h$density)*1.1), xlim=c(0, max(h$mids)*1.1))
#plot( h$density ~ h$mids, main=my.strains[i], xlab="RLS",ylab="density")
#par(new=TRUE);
t= seq(0, max(h$mids)*1.2, by=0.1)
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
m = report$R[i]*(1 + t/ report$t0[i])^(report$n[i] -1 )
pdf = s*m
lines( pdf ~ t, col='red', lty=1)
s.g =  G.s( c(report$GompRFlex[i], report$GompGFlex[i]), t );
m.g =  report$GompRFlex[i]*exp(report$GompGFlex[i]*t)
pdf.g = s.g * m.g
lines( pdf.g ~ t, col="blue", lty=2)
#  legend ( x[i], y[i], c("Binomial","Gompertz"), col=c("red","blue"), lty=c(1,2), cex=0.7 )
legend ( "topright", c("Binomial","Gompertz"), col=c("red","blue"), lty=c(1,2), cex=0.7 )
}
dev.off()
rm(list=ls())
library('flexsurv')
library('stringr')
source("../lifespan.r")
tb = read.csv("kaeberlein04_selected_strains.csv")
names(tb)
my.strains = c("BY4742", "sir2", "SIR2.ox", "fob1", "hxk2", "fob1 hxk2");
report = data.frame(my.strains)
report$samplesize = NA; report$R=NA; report$t0=NA; report$n=NA; report$G=NA; #report$longfilename=NA;
#write.csv(tb, "kaeberlein04_selected_strains.csv", row.names = FALSE, quote = FALSE)
for( i in 1:length(report[,1])){
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
report$samplesize[i] = length(my.data)
GompFlex = flexsurvreg(formula = Surv(tb[,i]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,i]) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(tb[,i], na.rm=T)
report$stdLS[i] =  sd(tb[,i], na.rm = T)
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 6;
t0= (nhat-1)/Ghat;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
lifespan=tb[,i],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-10, 1, 1), upper=c(1,200,20) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$G[i] = (report$n[i] - 1)/report$t0[i]
}
report
write.csv(report, file = 'sandbox/_Kaeberlein04_singlefit.csv', row.names = FALSE)
# html version, (x,y) are legend positions for plots
#x = c(0,    0,   0,     0,   40,   55,  50,   5);
#y = c(0.06, 0.06, 0.1, 0.1,0.04, 0.03, 0.03, 0.03  );
pdf("kae04_plots.pdf", width=4, height =4 );
# pdf version, (x,y) are legend positions for plots
#x = c(0,    32,   0,     0,   32,   0,  0,    0   );
#y = c(0.07, 0.06, 0.12, 0.12,0.05, 0.04, 0.04, 0.031  );
for( i in 1:length(report[,1])){
my.data = tb[,i]
my.data = my.data[! is.na(my.data)]
h= hist(my.data, br=max(my.data)/2, plot = FALSE);
hist(my.data, probability = TRUE, col='gray', border='white', xlab='RLS', ylab='probability',
main=my.strains[i], ylim=c(0, max(h$density)*1.1), xlim=c(0, max(h$mids)*1.1))
#plot( h$density ~ h$mids, main=my.strains[i], xlab="RLS",ylab="density")
#par(new=TRUE);
t= seq(0, max(h$mids)*1.2, by=0.1)
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
m = report$R[i]*(1 + t/ report$t0[i])^(report$n[i] -1 )
pdf = s*m
lines( pdf ~ t, col='red', lty=1)
s.g =  G.s( c(report$GompRFlex[i], report$GompGFlex[i]), t );
m.g =  report$GompRFlex[i]*exp(report$GompGFlex[i]*t)
pdf.g = s.g * m.g
lines( pdf.g ~ t, col="blue", lty=2)
#  legend ( x[i], y[i], c("Binomial","Gompertz"), col=c("red","blue"), lty=c(1,2), cex=0.7 )
legend ( "topright", c("Binomial","Gompertz"), col=c("red","blue"), lty=c(1,2), cex=0.7 )
}
dev.off()
rm(list=ls())
library('flexsurv')
library('stringr')
source("../lifespan.r")
list.files(, path='sandbox')
rm(list=ls())
library('flexsurv')
library('stringr')
source("../lifespan.r")
list.files(, path='sandbox', pattern='csv')
rm(list=ls())
library('flexsurv')
library('stringr')
source("../lifespan.r")
list.files( path='sandbox', pattern='csv')
stb = read.csv("_Kaeberlein04_singlefit.csv")
stb = read.csv("sandbox/_Kaeberlein04_singlefit.csv")
summary(stb)
btb = read.csv("_Kaberlein04_Bootstrap_summary.csv")
btb = read.csv("sandbox/_Kaberlein04_Bootstrap_summary.csv")
summary(btb)
cbind(stb$my.strains, btb$my.strains)
cbind(stb$my.strains, btb$my.strains)
cbind(as.character(stb$my.strains), as.character(btb$my.strains))
cbind(as.character(stb$my.strains), as.character(btb$my.strains));
summary(lm(stb$R ~ btb$R));
rm(list=ls())
library('flexsurv')
library('stringr')
source("../lifespan.r")
list.files( path='sandbox', pattern='csv')
btb = read.csv("sandbox/_Kaberlein04_Bootstrap_summary.csv")
summary(btb)
stb = read.csv("sandbox/_Kaeberlein04_singlefit.csv")
summary(stb)
cbind(as.character(stb$my.strains), as.character(btb$my.strains));
summary(lm(stb$R ~ btb$R));
summary(lm(stb$t0 ~ btb$t0));
rm(list=ls())
library('flexsurv')
library('stringr')
source("../lifespan.r")
list.files( path='sandbox', pattern='csv')
btb = read.csv("sandbox/_Kaberlein04_Bootstrap_summary.csv")
summary(btb)
stb = read.csv("sandbox/_Kaeberlein04_singlefit.csv")
summary(stb)
cbind(as.character(stb$my.strains), as.character(btb$my.strains));
summary(lm(stb$R ~ btb$R));
summary(lm(stb$t0 ~ btb$t0));
summary(lm(stb$n ~ btb$n));
rm(list=ls())
library('flexsurv')
library('stringr')
source("../lifespan.r")
list.files( path='sandbox', pattern='csv')
btb = read.csv("sandbox/_Kaberlein04_Bootstrap_summary.csv")
summary(btb)
stb = read.csv("sandbox/_Kaeberlein04_singlefit.csv")
summary(stb)
cbind(as.character(stb$my.strains), as.character(btb$my.strains));
plot(stb$R ~ btb$R )
summary(lm(stb$R ~ btb$R));
plot( stb$t0 ~ btb$t0 )
summary(lm(stb$t0 ~ btb$t0));
plot(stb$n ~ btb$n);
summary(lm(stb$n ~ btb$n));
plot(stb$n ~ btb$n);
text(btb$n,stb$n, as.character(stb$my.strains))
summary(lm(stb$n ~ btb$n));
plot( stb$t0 ~ btb$t0 )
text(btb$t0,stb$t0, as.character(stb$my.strains))
summary(lm(stb$t0 ~ btb$t0));
plot(stb$R ~ btb$R )
text(btb$R,stb$R, as.character(stb$my.strains))
summary(lm(stb$R ~ btb$R));
rm(list=ls())
#setwd("~/github/0.network.aging.prj.bmc/0a.rls.fitting")
#setwd("~/github/bmc_netwk_aging_manuscript/R1/0.nat.rls.fitting")
library('flexsurv')
source("../lifespan.r")
##### log likelihood function, R-fixed 2-parameter binomial mortality rate model
# http://hongqinlab.blogspot.com/2013/12/binomial-mortailty-model.html
# m = R ( 1 + t/t0)^(n-1)
# s = exp( (R t0/n)*(1 - (1+t/t0)^n ) )
llh.binomialMortality.single.run.NoR0 <- function( Rt0n, lifespan, debug=0 ) {
I = R0;
t0 = Rt0n[2]; n=Rt0n[3];
my.data = lifespan[!is.na(lifespan)];
log_s = (I * t0 /n )*(1 - (1 + my.data/t0)^n);
log_m = log(I) +  (n-1) * log(1 + my.data/t0 );
my.lh = sum(log_s)  + sum(log_m);
if(debug) { print (c(I, Rt0n )); } #trace the convergence
ret = - my.lh # because optim seems to maximize
}
llh.binomialMortality.single.run.FixedN <- function( Rt0n, lifespan, debug=0 ) {
I=Rt0n[1]; t0 = Rt0n[2]; #n=Rt0n[3]; n defined outside
my.data = lifespan[!is.na(lifespan)];
log_s = (I * t0 /n )*(1 - (1 + my.data/t0)^n);
log_m = log(I) +  (n-1) * log(1 + my.data/t0 );
my.lh = sum(log_s)  + sum(log_m);
if(debug) { print (c(I, Rt0n )); } #trace the convergence
ret = - my.lh # because optim seems to maximize
}
set.seed(20170101)
my.strains=c("101S", "M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57", "YPS128","YPS163")
report = data.frame(cbind(my.strains))
report$samplesize = NA; report$R=NA; report$t0=NA; report$n=NA; report$G=NA; report$longfilename=NA;
for( i in 1:length(report[,1])){
#for( i in 3:4){
filename = paste("rls/", my.strains[i], ".csv", sep='' );
report$longfilename[i] = filename;
tb = read.csv( filename, header =F)
report$samplesize[i] = length(tb[,1])
GompFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'gompertz')
WeibFlex = flexsurvreg(formula = Surv(tb[,1]) ~ 1, dist = 'weibull')
report$avgLS[i] =  mean(tb[,1])
report$stdLS[i] =  sd(tb[,1])
report$CV[i] = report$stdLS[i] / report$avgLS[i]
report$GompGFlex[i] = GompFlex$res[1,1]
report$GompRFlex[i] = GompFlex$res[2,1]
report$GompLogLikFlex[i] = round(GompFlex$loglik, 1)
report$GompAICFlex[i] = round(GompFlex$AIC)
report$WeibShapeFlex[i] = WeibFlex$res[1,1]
report$WeibRateFlex[i] = WeibFlex$res[2,1]
report$WeibLogLikFlex[i] = round(WeibFlex$loglik, 1)
report$WeibAICFlex[i] = round(WeibFlex$AIC)
#set initial values
Rhat = report$GompRFlex[i]; # 'i' was missing. a bug costed HQ a whole afternoon.
Ghat = report$GompGFlex[i];
nhat = 8;
t0= (nhat-1)/Ghat;
if( is.na( match(my.strains[i], c('M8' )) ) ) {
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run,
lifespan=tb[,1],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-4, 1, 2), upper=c(0.1,200,100) );
report[i, c("R", "t0", "n")] = fitBinom$par[1:3]
report$BinomialAIC[i] = 2*3 + 2*fitBinom$value
} else { #M8, fix n
print(my.strains[i])
#llh.binomialMortality.single.run.FixedN <- function( Rt0n, lifespan, debug=0 ) {
n=11.5;
fitBinom = optim ( c(Rhat, t0, nhat),  llh.binomialMortality.single.run.FixedN,
lifespan=tb[,1],
#method='SANN') #SANN needs control
method="L-BFGS-B",
lower=c(1E-5, 1, 2), upper=c(0.1,200,100) );
report[i, c("R", "t0", "n")] = c(fitBinom$par[1:2], n)
report$BinomialAIC[i] = 2*3 + 2*fitBinom$value
}
report$G[i] = (report$n[i] - 1)/report$t0[i]
#AIC
# llh.binomialMortality.single.run <- function( Rt0n, lifespan, debug=0 )
#report$BinomialAICqin[i] = 2*3 + 2*llh.binomialMortality.single.run( report[i, c("R", "t0", "n")], lifespan=tb[,1] )
#llh.G.single.run <- function( IG, lifespan ) {
#report$GompAICqin[i] = 2*2 + 2* llh.G.single.run(report[i,c("GompRFlex", "GompGFlex")], lifespan=tb[,1])
# dgompertz <- function(x, shape, rate=1, log=FALSE)
#report$GompAICdgompergtz[i] = 2*2 - 2* sum(dgompertz(tb[,1],shape=report$GompGFlex[i], rate=report$GompRFlex, log=TRUE));
#report$GompAICdgompergtz2[i] = 2*2 - 2* sum(dgompertz(tb[,1],shape=report$GompRFlex[i], rate=report$GompGFlex, log=TRUE));
}
#report[ grep("tBY", report$strains), ]
report
summary(report[, c("avgLS", "t0", "n")])
for( i in 1:length(my.strains)){
#for( i in 3:4){
filename = paste("rls/", my.strains[i], ".csv", sep='' );
tb = read.csv( filename, header =F)
ret = calculate.s(tb[,1])
plot( ret$s ~ ret$t, main=my.strains[i]);
print (report[i,  ]);
#overlay binomial aging viability
print (report[i, c("R", "t0", "n", "G")] );
t = seq(0,max(ret$t*1.1), 0.1);
# s = exp( (R t0/n)*(1 - (1+t/t0)^n ) )
s = exp( (report$R[i]* report$t0[i]/report$n[i])*(1 - (1+t/report$t0[i])^report$n[i] ) ) ;
lines(s ~ t, col='red')
#overlay gompertz  viability
s.g =  G.s( c(report$GompRFlex[i], report$GompGFlex[i], 0), t )
lines(s.g ~ t, col='blue')
}
report
p = 0.7
report$One.over.lambdaP07 = report$t0 * p/ (1-p)
report[, c("t0", "One.over.lambdaP07")]
summary( report[, c("t0", "One.over.lambdaP07")])
hist(report$One.over.lambdaP07, br=20, xlim=c(60,190), xlab=expression(paste("1/",lambda) ), main=expression(paste("Histogram of 1/",lambda, " when p=0.7")))
p = 0.9
report$One.over.lambdaP09 = report$t0 * p/ (1-p)
report[, c("t0", "One.over.lambdaP09")]
summary( report[, c("t0", "One.over.lambdaP09")] )
hist(report$One.over.lambdaP09, br=20, xlim=c(200,800), xlab=expression(paste("1/",lambda) ), main=expression(paste("Histogram of 1/",lambda, " when p=0.9")))
# my.strains=c("101S", "BY4743","M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57","SK1","W303","YPS128","YPS163")
#my.strains=c("101S", "M1-2","M13","M14","M2-8","M22","M32","M34","M5","M8","RM112N","S288c","SGU57", "YPS128","YPS163")
report2 = report
summary(lm(log10(report2$GompRFlex) ~ report2$GompGFlex))
summary(lm(log10(report2$R) ~ report2$GompGFlex))
summary(lm(log10(report2$R) ~ report2$G)) #G from t0 and n
summary(lm(report2$GompGFlex ~ report2$G)) #good agreement bwteen GFlex and G from binomial modeling
summary(lm(log10(report2$R) ~ report2$t0)) #G from t0 and n
summary(lm(log10(report2$R) ~ report2$n)) #G from t0 and n
plot( log10(report2$R) ~ report2$G, pch=19, col='red', xlab='G', ylab='log10(R)',
xlim=c(0.07, 0.22), ylim=c(-2.9, -2.1),
main="Strehler-Mildvan correlation in yeast wild isolates")
m = lm(log10(report2$R) ~ report2$G)
abline (m, col='black', lty=2);
text(0.18, -2.2, "Rsquared=0.39 p=0.01")
my.x = report2$G +0.0013 ; my.y = log10(report2$R) ;
names(my.x) = report2$my.strains; names(my.y) = report2$my.strains;
my.y[c("YPS163", "M1-2" )]=c(-2.8, -2.63)
text(my.x,my.y, report2$my.strains, adj=c(0,0) )
summary(lm(log10(report2$R) ~ report2$G)) #G from t0 and n
summary(lm(log10(report2$GompRFlex) ~ report2$GompGFlex)) #G from t0 and n
plot( log10(report2$R) ~ report2$t0, col='red',  pch=19, xlab='t0', ylab='log10(RFlex)', ylim=c(-3,-2))
my.x = report2$t0; my.y = log10(report2$R) + 0.04;
names(my.x) = report2$my.strains; names(my.y) = report2$my.strains;
my.y[c("M32","YPS163", "YPS128", "M1-2" )]=c(-2.75, -2.8, -2.75, -2.63)
text(my.x,my.y, report2$my.strains )
m = lm(  log10(report2$R) ~ report2$t0  )
abline (m, col='black', lty=2);
text( 60, -2.8, "R^2=0.44, p=0.007")
summary(m)
plot( log10(report2$GompRFlex) ~ report2$t0, col='red',  pch=19, xlab='t0', ylab='log10(Rflex)', ylim=c(-3.5,-2))
my.x = report2$t0; my.y = log10(report2$GompRFlex) + 0.04;
names(my.x) = report2$my.strains; names(my.y) = report2$my.strains;
my.y[c("M32","YPS163", "YPS128", "M1-2" )]=c(-2.75, -2.8, -2.75, -2.63)
text(my.x,my.y, report2$my.strains )
m = lm(  log10(report2$GompRFlex) ~ report2$t0  )
abline (m, col='black', lty=2);
text( 60, -2.8, "R^2=0.36, p=0.019")
summary(m)
summary(lm( log10(report2$GompRFlex) ~ report2$t0 + report2$GompGFlex  )) #poor
summary(lm( log10(report2$GompGFlex) ~ report2$t0 + report2$GompRFlex  ))#good
#summary(lm( report2$G ~ log10(report2$R) + report2$t0  ))
#summary(lm( report2$G ~ report2$t0 + log10(report2$R)   ))
summary(lm( report2$GompGFlex ~ report2$t0 + log10(report2$R)   ))
summary(lm( report2$GompGFlex ~ report2$t0 + log10(report2$GompRFlex)   ))
library(mediation)
set.seed(20170801)
report2$log10GompRFlex = log10(report2$GompRFlex)
med.fit = lm(t0 ~ log10GompRFlex, data=report2)
summary(med.fit)
out.fit = lm(GompGFlex ~ t0 + log10GompRFlex, data=report2)
summary(out.fit)
med.out <- mediate(med.fit, out.fit, treat = "log10GompRFlex", mediator = "t0", robustSE = TRUE, sims = 100)
summary(med.out)
med.fit = lm(t0 ~ GompGFlex, data=report2)
summary(med.fit)
out.fit = lm(log10GompRFlex ~ t0 + GompGFlex, data=report2)
summary(out.fit)
med.out <- mediate(med.fit, out.fit, treat = "GompGFlex", mediator = "t0", robustSE = TRUE, sims = 100)
summary(med.out)
plot( report2$t0 ~ report2$n, col='red', xlim=c(5.5, 9), ylim=c(25, 80), pch=19, xlab='n', ylab='t0')
my.x = report2$n + 0.1; my.y = report2$t0 + 2;
names(my.x) = report2$my.strains; names(my.y) = report2$my.strains;
my.y[c("M14","SGU57", "M32","M13" )]=c(52, 52, 33, 38)
text(my.x,my.y, report2$my.strains )
text(6, 70, "p=0.60")
summary(lm(log10(report2$t0) ~ report2$n)) #G from t0 and n
report$BestModel = ifelse(report$GompAICFlex < report$WeibAICFlex, "Gomp", "Weib")
report$BestModel = ifelse(abs(report$GompAICFlex - report$WeibAICFlex)<2, "<2", report$BestModel)
summary(lm(report$CV ~ report$BestModel ))
summary(lm(report$CV ~ report$WeibLogLikFlex ))
summary(lm(report$CV ~ report$GompLogLikFlex  ))
summary(lm(report$CV ~ (report$GompLogLikFlex - report$WeibLogLikFlex)))
plot( report$GompLogLikFlex ~ report$CV, col="red", pch=3, xlim=c(0, 0.8), ylim=c(-220, -80))
points( report$CV, report$WeibLogLikFlex, col="blue", pch=4)
m1 = lm( report$GompLogLikFlex ~ report$CV)
m2 = lm( report$WeibLogLikFlex ~ report$CV)
abline( m1, col="red", lty=2)
abline( m2, col='blue', lty=1)
text(0.6, -210, "nearly the same!?")
report$DeltaGompWeiLLH = report$GompLogLikFlex - report$WeibLogLikFlex
plot( report$DeltaGompWeiLLH ~ report$CV )
m3 = lm( report$DeltaGompWeiLLH ~ report$CV)
abline(m3, col='red')
