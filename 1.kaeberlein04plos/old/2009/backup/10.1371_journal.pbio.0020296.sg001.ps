%!PS-Adobe-3.0 EPSF-3.0
%%Title: (PowerPoint Presentation)
%%Version: 1 3
%%Creator: (Acrobat PDFMaker 5.0 for PowerPoint)
%%CreationDate: (D:20040628121756-07'00')
%%For: (Brian Kennedy)
%%DocumentData: Clean7Bit
%%BoundingBox: 37 37 575 755
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
37 37 moveto 575 37 lineto 575 755 lineto 37 755 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 10
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 7
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 lt
{
c1x c1y r1 360 0 arcn
xMin yMin moveto
xMax yMin lineto
xMax yMax lineto
xMin yMax lineto
xMin yMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 le
{
c2x c2y r2 360 0 arcn
xMin yMin moveto
xMax yMin lineto
xMax yMax lineto
xMin yMax lineto
xMin yMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 13
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 6
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
37 37 538 718 rectclip
%%BeginResource: font CMEHAN+TimesNewRoman,Bold
11 dict begin
/FontName /CMEHAN+TimesNewRoman,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1296 dict dup begin
/.notdef 
<10bf317005b8302fd45b0609d6bde5a48b0240d44d91aabd11b7ee50303a
812fda6ed97443c437b8d3bea589> ND 
/A 
<10bf3170612fa8ae28b81a20dacbdc38fc69afa09cf4db39e2bcdbcf6119
e64e70a7c6c564effe07b0d371ef6f05ab9d6662cd1799a518254c2df7b7
8dfc3b0a250c148f91a4756fa92e10425e9175aca407e63cc6c881765861
33901dd8defb282b3058bcf1eedaae00432ffd6e425310aafc215cf1f67e
d5f415092da5cbb3e9181cf978ff1cb31931925aedff81ea92> ND 
/B 
<10bf317052449ea25b9d9b33d7cf9abe02c2ba183a795b60a2e2da8fe2ab
59820e4439ef91aeeb6e59222b823867aa2672bf8fdad1e58fce992fc9b3
9edd4074e6464aecf07c3b45f3a3ff9c579ca146950146b0682c566fbdaa
5bb74d9a411031dfa358f792811417f729de3d49934ed1388c2da049ffc6
ef5fd2246d45392f6d5c0634d1249ee2e2091fa331c05c92e606df295c35
9e6624254370eb30c66c3e3d84d3b5e762c4e5966c6ae46aa0ed42a9e153
5a7368d8c5a29ae6feac658ca4a484b53c389d52e121fee5c2a2b2baef3e
7c33ed344d217766f8402d6a620d1f2e968bf673258710d57be3a73f94f9
33840fb7ba62b26639f3d4> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/CMEHAN+TimesNewRoman,Bold findfont /Encoding get
dup 0 /.notdef put
dup 65 /A put
dup 66 /B put
pop
%%EndResource
[/N42/CMEHAN+TimesNewRoman,Bold 1 TZ
%%BeginResource: font CMEFDB+Arial
11 dict begin
/FontName /CMEFDB+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1296 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/percent 
<10bf317037023d4c0d7ec55f50e0d703cd7cc105c35d70b97d9489f0de07
1f70e38783ce8e9659e1fefb002060a7a90b5cb341b84da319570fed6eb1
3c12736330866a12140091578a9079f81c1e9ef006fa4621a4c29d25db0a
b058888fced51fc8bebd1a50501fcc89f54d4ee1414d565dbbd612ca2590
d905e6eb5d353948cd6733d4356a2ddfe46e46c7517e7690d44bd5f41df2
b9cfb0904cbb29cfedfae23e19961f73f5f45aaee51f2b5e13e122291911
3b18e6fc580c2aa968414a081af12dbe515ca377c334103e76ca0e06727b
f4bfe9d3cf45104cce59563993bcb7254fcd1dfbd8832a1a621076705e0b
638f8ed9640e236482bf53dd2d05ea8be78a6a206ba51b06d485d58b1de6
14513677> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce
72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab
638d0f6753cf0f10ef> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/B 
<10bf317026ba62063ac1fc9b1b7e78ffd02405a6073c267edcf7d4772d8b
d58886357b255f6a34ffdb28ea7dd3bcde9e8d86152df16bbf95464b3da5
81a80241ab3a15cb834fac879964bca12ae45a2346542b45e7f82e769dc6
0e9db083a82e08534c9f6f82aa9d811f6505bf0b1bb832cbb587ac8320f0
ae1ae42aea897a566c4e8001af359257dc731487787c0d93ef9b2f1ed840
41901425e5e82bd0ae3793e0dd4c50ff12905ccd193e1ae08c7b651a3ee6
9ac2a8d60e0001b1e2cb724d65cbbbc80d6c9cf4edb8b286a76ac8c6d7e6
c234df3f063f1d91> ND 
/F 
<10bf31702f7c4b31b7f92f61f70a9032d1addef58c81f5b8fed9651d8c00
81acb06eda84b504e7> ND 
/G 
<10bf317032094fc341dd3fe1e9917e7219e2faf83af778bdd7ec0c55098b
e0e9b7739ea63012a93f617db4a54ea175a87f3963b18d82408a4b4aca07
c62fb2e9535e5b6e8c7ae61eda2a1953530b7a1c20e1c613736eaa239c10
515a07f3aa0b6d64123373a1e5a99a624259a238e115671adf7333dd41a7
8ab39a78f4284786c4df0d20429167addc89fc078c7c417063dcfe0d52c4
81387bcf48cb4c7455f1384c6dd065c8e657f42b246b3a7cb37a89589130
dac20b879178be4ff3a9d7cba8> ND 
/V 
<10bf31707d937b42ca5aa917fb8735867898e23266ce63f299decbd88902
a58f50d327fa84a3893c0fe3af9d5b8d8ece1349c10cbf> ND 
/Y 
<10bf31707c6218bd7493270aeec5b5548cc151bd0d43bdac9c93106ba1fc
c37088a2e404f9545977f3a23048512c777eb26c24f40d6b5497f88ff310
89> ND 
/a 
<10bf31705d64e193f9f1f8a567d03549fa73483ae9b672d7b7797200c526
6d55e0abf05d082c89da2ef3d2f91996aeea18b52bf494757c5251c9374c
9401f98b0cace0d4875f7ed6fd1c3b2afb70e988b112b201a9d47e0c13f4
1047852d209bb94beef969307b8c216c427c9903125ecb96a03389115b44
edc7e2e2478a1fd25f07acc3624f3ed1b5defe5adc0d2b5c9f2461afba44
82f331b79ca3a770e50164bc5ea7976dee8e016d390d83fcc1fa4202137b
503516f93235eba4c56226d091ad7f8be6c874f34a5fb2592031776db147
88325910cfdd12dfbef218194f528860b4df22c468e92140ddaed77110f7
ac35f3eb45ccb9aa77fa9fad75c6eb6c0fb7ca> ND 
/b 
<10bf31703e65fd7e1217c9f29c64bb1b9e17851bf25dd0466fa484e27564
2ef62da05fc0e561425aa7c0cf759f2df2fed9f5cab4e563d9d485ca6e49
6a23023cc7d5336a38ed163f6d25eac0416c891913363ad8aab5312feed7
de0b0bbcc0db8b66958d96174480f5040af2cfb1590a9410022fc6398cb1
d4435f6325a11aad4c77347983eb4748b4ada02263a3> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/CMEFDB+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 37 /percent put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 66 /B put
dup 70 /F put
dup 71 /G put
dup 86 /V put
dup 89 /Y put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 160 /space put
pop
%%EndResource
[/N37/CMEFDB+Arial 1 TZ
37 37 538 718 re
W
n
n
36 36 540 720 re
1 1 1 setrgbcolor
f
q
n
322.8 672.06 85.98 0.0599976 re
W
n
0.0599976 w
1 j
1 J
n
322.8 672.12 m
503.4 672.12 l
S
Q
0.0599976 w
1 j
1 J
n
322.8 672.12 m
322.8 528.54 l
320.64 528.54 m
322.8 528.54 l
320.64 672.12 m
322.8 672.12 l
322.8 528.54 m
503.4 528.54 l
322.8 526.14 m
322.8 528.54 l
367.92 526.14 m
367.92 528.54 l
413.1 526.14 m
413.1 528.54 l
458.22 526.14 m
458.22 528.54 l
503.4 526.14 m
503.4 528.54 l
0 0 0  setrgbcolor
S
0.899994 w
n
322.8 672.12 m
334.14 664.92 l
356.58 657.66 l
359.04 650.46 l
359.04 636.06 l
367.92 629.16 l
367.92 621.96 l
370.08 614.76 l
370.08 600.36 l
376.86 593.1 l
379.32 585.9 l
379.32 578.7 l
392.82 571.5 l
399.54 564.3 l
406.32 557.4 l
410.94 550.2 l
415.26 543 l
426.6 535.8 l
431.22 528.54 l
S
0.300003 w
n
322.8 672.12 m
354.42 664.92 l
370.08 657.66 l
379.32 650.46 l
383.58 643.26 l
383.58 636.06 l
390.66 629.16 l
390.66 621.96 l
392.82 614.76 l
392.82 607.56 l
394.98 600.36 l
399.54 593.1 l
399.54 578.7 l
401.7 571.5 l
408.48 564.3 l
415.26 557.4 l
415.26 550.2 l
417.66 543 l
421.98 535.8 l
428.76 528.54 l
0 1 0  setrgbcolor
S
n
322.8 672.12 m
354.42 664.92 l
379.32 657.66 l
381.42 650.46 l
383.58 643.26 l
383.58 636.06 l
386.04 629.16 l
401.7 621.96 l
408.48 614.76 l
410.94 607.56 l
410.94 600.36 l
413.1 593.1 l
413.1 585.9 l
421.98 578.7 l
431.22 571.5 l
433.38 564.3 l
437.94 557.4 l
446.88 550.2 l
456.06 543 l
465 535.8 l
478.5 528.54 l
1 0 0  setrgbcolor
S
n
322.8 672.12 m
343.08 664.92 l
372.54 657.66 l
372.54 650.46 l
379.32 643.26 l
388.2 636.06 l
397.44 629.16 l
401.7 621.96 l
404.16 614.76 l
410.94 607.56 l
415.26 600.36 l
417.66 593.1 l
417.66 585.9 l
424.44 578.7 l
428.76 571.5 l
437.94 564.3 l
444.72 557.4 l
451.5 550.2 l
469.62 543 l
476.34 535.8 l
496.62 528.54 l
0 0 1  setrgbcolor
S
n
322.8 672.12 m
322.8 673.5 l
322.8 672.12 m
322.8 670.74 l
322.8 672.12 m
321.54 672.12 l
322.8 672.12 m
324 672.12 l
354.42 664.92 m
354.42 666.24 l
354.42 664.92 m
354.42 663.54 l
354.42 664.92 m
353.22 664.92 l
354.42 664.92 m
355.68 664.92 l
370.08 657.66 m
370.08 659.04 l
370.08 657.66 m
370.08 656.28 l
370.08 657.66 m
368.88 657.66 l
370.08 657.66 m
371.34 657.66 l
379.32 650.46 m
379.32 651.84 l
379.32 650.46 m
379.32 649.08 l
379.32 650.46 m
378.06 650.46 l
379.32 650.46 m
380.52 650.46 l
383.58 643.26 m
383.58 644.64 l
383.58 643.26 m
383.58 641.88 l
383.58 643.26 m
382.38 643.26 l
383.58 643.26 m
384.84 643.26 l
383.58 636.06 m
383.58 637.44 l
383.58 636.06 m
383.58 634.68 l
383.58 636.06 m
382.38 636.06 l
383.58 636.06 m
384.84 636.06 l
390.66 629.16 m
390.66 630.54 l
390.66 629.16 m
390.66 627.78 l
390.66 629.16 m
389.46 629.16 l
390.66 629.16 m
391.92 629.16 l
390.66 621.96 m
390.66 623.34 l
390.66 621.96 m
390.66 620.58 l
390.66 621.96 m
389.46 621.96 l
390.66 621.96 m
391.92 621.96 l
392.82 614.76 m
392.82 616.14 l
392.82 614.76 m
392.82 613.38 l
392.82 614.76 m
391.56 614.76 l
392.82 614.76 m
394.02 614.76 l
392.82 607.56 m
392.82 608.94 l
392.82 607.56 m
392.82 606.18 l
392.82 607.56 m
391.56 607.56 l
392.82 607.56 m
394.02 607.56 l
394.98 600.36 m
394.98 601.68 l
394.98 600.36 m
394.98 598.98 l
394.98 600.36 m
393.72 600.36 l
394.98 600.36 m
396.18 600.36 l
399.54 593.1 m
399.54 594.48 l
399.54 593.1 m
399.54 591.72 l
399.54 593.1 m
398.34 593.1 l
399.54 593.1 m
400.8 593.1 l
399.54 585.9 m
399.54 587.28 l
399.54 585.9 m
399.54 584.52 l
399.54 585.9 m
398.34 585.9 l
399.54 585.9 m
400.8 585.9 l
399.54 578.7 m
399.54 580.08 l
399.54 578.7 m
399.54 577.32 l
399.54 578.7 m
398.34 578.7 l
399.54 578.7 m
400.8 578.7 l
401.7 571.5 m
401.7 572.88 l
401.7 571.5 m
401.7 570.12 l
401.7 571.5 m
400.5 571.5 l
401.7 571.5 m
402.96 571.5 l
408.48 564.3 m
408.48 565.68 l
408.48 564.3 m
408.48 562.92 l
408.48 564.3 m
407.22 564.3 l
408.48 564.3 m
409.68 564.3 l
0 1 0  setrgbcolor
S
n
415.26 557.4 m
415.26 558.78 l
415.26 557.4 m
415.26 556.02 l
415.26 557.4 m
414 557.4 l
415.26 557.4 m
416.46 557.4 l
415.26 550.2 m
415.26 551.58 l
415.26 550.2 m
415.26 548.82 l
415.26 550.2 m
414 550.2 l
415.26 550.2 m
416.46 550.2 l
417.66 543 m
417.66 544.38 l
417.66 543 m
417.66 541.62 l
417.66 543 m
416.46 543 l
417.66 543 m
418.92 543 l
421.98 535.8 m
421.98 537.12 l
421.98 535.8 m
421.98 534.42 l
421.98 535.8 m
420.78 535.8 l
421.98 535.8 m
423.24 535.8 l
428.76 528.54 m
428.76 529.92 l
428.76 528.54 m
428.76 527.22 l
428.76 528.54 m
427.5 528.54 l
428.76 528.54 m
429.96 528.54 l
S
n
322.8 673.5 m
324 670.74 l
321.54 670.74 l
322.8 673.5 l
h
354.42 666.24 m
355.68 663.54 l
353.22 663.54 l
354.42 666.24 l
h
379.32 659.04 m
380.52 656.28 l
378.06 656.28 l
379.32 659.04 l
h
381.42 651.84 m
382.68 649.08 l
380.22 649.08 l
381.42 651.84 l
h
383.58 644.64 m
384.84 641.88 l
382.38 641.88 l
383.58 644.64 l
h
383.58 637.44 m
384.84 634.68 l
382.38 634.68 l
383.58 637.44 l
h
386.04 630.54 m
387.3 627.78 l
384.84 627.78 l
386.04 630.54 l
h
401.7 623.34 m
402.96 620.58 l
400.5 620.58 l
401.7 623.34 l
h
408.48 616.14 m
409.68 613.38 l
407.22 613.38 l
408.48 616.14 l
h
410.94 608.94 m
412.14 606.18 l
409.68 606.18 l
410.94 608.94 l
h
410.94 601.68 m
412.14 598.98 l
409.68 598.98 l
410.94 601.68 l
h
413.1 594.48 m
414.3 591.72 l
411.84 591.72 l
413.1 594.48 l
h
413.1 587.28 m
414.3 584.52 l
411.84 584.52 l
413.1 587.28 l
h
421.98 580.08 m
423.24 577.32 l
420.78 577.32 l
421.98 580.08 l
h
431.22 572.88 m
432.42 570.12 l
429.96 570.12 l
431.22 572.88 l
h
433.38 565.68 m
434.58 562.92 l
432.12 562.92 l
433.38 565.68 l
h
437.94 558.78 m
439.2 556.02 l
436.74 556.02 l
437.94 558.78 l
h
446.88 551.58 m
448.08 548.82 l
445.62 548.82 l
446.88 551.58 l
h
456.06 544.38 m
457.32 541.62 l
454.86 541.62 l
456.06 544.38 l
h
465 537.12 m
466.2 534.42 l
463.74 534.42 l
465 537.12 l
h
478.5 529.92 m
479.7 527.22 l
477.3 527.22 l
478.5 529.92 l
h
1 0 0  setrgbcolor
S
n
323.61 672.36 m
323.61 672.36 l
323.61 673.006 323.14 673.53 322.56 673.53 c
321.98 673.53 321.51 673.006 321.51 672.36 c
321.51 671.714 321.98 671.19 322.56 671.19 c
323.14 671.19 323.61 671.714 323.61 672.36 c
h
343.89 665.1 m
343.89 665.1 l
343.89 665.746 343.42 666.27 342.84 666.27 c
342.26 666.27 341.79 665.746 341.79 665.1 c
341.79 664.454 342.26 663.93 342.84 663.93 c
343.42 663.93 343.89 664.454 343.89 665.1 c
h
373.38 657.9 m
373.38 657.9 l
373.38 658.546 372.923 659.07 372.36 659.07 c
371.797 659.07 371.34 658.546 371.34 657.9 c
371.34 657.254 371.797 656.73 372.36 656.73 c
372.923 656.73 373.38 657.254 373.38 657.9 c
h
373.38 650.7 m
373.38 650.7 l
373.38 651.346 372.923 651.87 372.36 651.87 c
371.797 651.87 371.34 651.346 371.34 650.7 c
371.34 650.054 371.797 649.53 372.36 649.53 c
372.923 649.53 373.38 650.054 373.38 650.7 c
h
380.13 643.5 m
380.13 643.5 l
380.13 644.146 379.66 644.67 379.08 644.67 c
378.5 644.67 378.03 644.146 378.03 643.5 c
378.03 642.854 378.5 642.33 379.08 642.33 c
379.66 642.33 380.13 642.854 380.13 643.5 c
h
389.04 636.3 m
389.04 636.3 l
389.04 636.946 388.583 637.47 388.02 637.47 c
387.457 637.47 387 636.946 387 636.3 c
387 635.654 387.457 635.13 388.02 635.13 c
388.583 635.13 389.04 635.654 389.04 636.3 c
h
398.25 629.4 m
398.25 629.4 l
398.25 630.046 397.78 630.57 397.2 630.57 c
396.62 630.57 396.15 630.046 396.15 629.4 c
396.15 628.754 396.62 628.23 397.2 628.23 c
397.78 628.23 398.25 628.754 398.25 629.4 c
h
402.57 622.2 m
402.57 622.2 l
402.57 622.846 402.1 623.37 401.52 623.37 c
400.94 623.37 400.47 622.846 400.47 622.2 c
400.47 621.554 400.94 621.03 401.52 621.03 c
402.1 621.03 402.57 621.554 402.57 622.2 c
h
405.03 615 m
405.03 615 l
405.03 615.646 404.56 616.17 403.98 616.17 c
403.4 616.17 402.93 615.646 402.93 615 c
402.93 614.354 403.4 613.83 403.98 613.83 c
404.56 613.83 405.03 614.354 405.03 615 c
h
411.75 607.8 m
411.75 607.8 l
411.75 608.446 411.28 608.97 410.7 608.97 c
410.12 608.97 409.65 608.446 409.65 607.8 c
409.65 607.154 410.12 606.63 410.7 606.63 c
411.28 606.63 411.75 607.154 411.75 607.8 c
h
416.07 600.54 m
416.07 600.54 l
416.07 601.186 415.6 601.71 415.02 601.71 c
414.44 601.71 413.97 601.186 413.97 600.54 c
413.97 599.894 414.44 599.37 415.02 599.37 c
415.6 599.37 416.07 599.894 416.07 600.54 c
h
418.53 593.34 m
418.53 593.34 l
418.53 593.986 418.06 594.51 417.48 594.51 c
416.9 594.51 416.43 593.986 416.43 593.34 c
416.43 592.694 416.9 592.17 417.48 592.17 c
418.06 592.17 418.53 592.694 418.53 593.34 c
h
418.53 586.14 m
418.53 586.14 l
418.53 586.786 418.06 587.31 417.48 587.31 c
416.9 587.31 416.43 586.786 416.43 586.14 c
416.43 585.494 416.9 584.97 417.48 584.97 c
418.06 584.97 418.53 585.494 418.53 586.14 c
h
425.28 578.94 m
425.28 578.94 l
425.28 579.586 424.823 580.11 424.26 580.11 c
423.697 580.11 423.24 579.586 423.24 578.94 c
423.24 578.294 423.697 577.77 424.26 577.77 c
424.823 577.77 425.28 578.294 425.28 578.94 c
h
429.57 571.74 m
429.57 571.74 l
429.57 572.386 429.1 572.91 428.52 572.91 c
427.94 572.91 427.47 572.386 427.47 571.74 c
427.47 571.094 427.94 570.57 428.52 570.57 c
429.1 570.57 429.57 571.094 429.57 571.74 c
h
438.81 564.48 m
438.81 564.48 l
438.81 565.142 438.34 565.68 437.76 565.68 c
437.18 565.68 436.71 565.142 436.71 564.48 c
436.71 563.818 437.18 563.28 437.76 563.28 c
438.34 563.28 438.81 563.818 438.81 564.48 c
h
445.53 557.64 m
445.53 557.64 l
445.53 558.286 445.06 558.81 444.48 558.81 c
443.9 558.81 443.43 558.286 443.43 557.64 c
443.43 556.994 443.9 556.47 444.48 556.47 c
445.06 556.47 445.53 556.994 445.53 557.64 c
h
452.31 550.44 m
452.31 550.44 l
452.31 551.086 451.84 551.61 451.26 551.61 c
450.68 551.61 450.21 551.086 450.21 550.44 c
450.21 549.794 450.68 549.27 451.26 549.27 c
451.84 549.27 452.31 549.794 452.31 550.44 c
h
470.43 543.24 m
470.43 543.24 l
470.43 543.886 469.96 544.41 469.38 544.41 c
468.8 544.41 468.33 543.886 468.33 543.24 c
468.33 542.594 468.8 542.07 469.38 542.07 c
469.96 542.07 470.43 542.594 470.43 543.24 c
h
0 0 1  setrgbcolor
S
n
477.21 535.98 m
477.21 535.98 l
477.21 536.626 476.74 537.15 476.16 537.15 c
475.58 537.15 475.11 536.626 475.11 535.98 c
475.11 535.334 475.58 534.81 476.16 534.81 c
476.74 534.81 477.21 535.334 477.21 535.98 c
h
497.46 528.78 m
497.46 528.78 l
497.46 529.426 497.003 529.95 496.44 529.95 c
495.877 529.95 495.42 529.426 495.42 528.78 c
495.42 528.134 495.877 527.61 496.44 527.61 c
497.003 527.61 497.46 528.134 497.46 528.78 c
h
S
0 0 0  setrgbcolor
313.26 525.54 m
/N37 [7.08 0 0 7.92 0 0] Tf
(0) show
313.26 669.06 m
(1) show
320.94 514.2 m
(0) show
363.958 514.2 m
(2) show
367.977 514.2 m
(04)
[41.0987 41.0987 ] pdfxs
413.094 514.2 m
(0) show
454.253 514.2 m
(6) show
458.272 514.2 m
(08)
[41.0987 41.0987 ] pdfxs
503.39 514.2 m
(0) show
395.879 503.58 m
(Ge)
[5.52099 3.94923 ] pdfxs
405.419 503.58 m
(n) show
409.078 503.58 m
(e) show
413.097 503.58 m
(r) show
415.557 503.58 m
(a) show
419.516 503.58 m
(t) show
421.377 503.58 m
(i) show
422.876 503.58 m
(o) show
426.895 503.58 m
(n) show
312.72 574.26 m
/N37 [0 7.08 -7.92 0 0 0] Tf
(Fr)
[4.34138 2.37314 ] pdfys
312.72 581.062 m
(ac)
[3.95204 3.55556 ] pdfys
312.72 588.734 m
(t) show
312.72 590.535 m
(i) show
312.72 592.094 m
(on)
[3.95204 3.95204 ] pdfys
312.72 599.765 m
( V)
[1.86129 4.73786 ] pdfys
312.72 606.186 m
(i) show
312.72 607.745 m
(ab)
[3.95204 3.95204 ] pdfys
312.72 615.417 m
(l) show
312.72 616.615 m
(e) show
0.899994 w
n
426.3 667.62 m
434.88 667.62 l
S
437.04 664.74 m
/N37 [8.28 0 0 9.3 0 0] Tf
(s) show
441.36 664.74 m
(i) show
443.158 664.74 m
(r2 f)
[2.77044 4.61694 2.46166 2.3151 ] pdfxs
455.168 664.74 m
(ob1)
[4.61694 4.61694 4.61694 ] pdfxs
468.961 664.74 m
( 2%)
[2.46166 4.61694 7.37412 ] pdfxs
0.300003 w
n
426.3 651.84 m
434.88 651.84 l
430.56 651.84 m
430.56 653.22 l
430.56 651.84 m
430.56 650.46 l
430.56 651.84 m
429.36 651.84 l
430.56 651.84 m
431.82 651.84 l
0 1 0  setrgbcolor
S
0 0 0  setrgbcolor
437.04 649.26 m
(s) show
441.36 649.26 m
(i) show
443.158 649.26 m
(r2 f)
[2.77044 4.61694 2.46166 2.3151 ] pdfxs
455.168 649.26 m
(ob1)
[4.61694 4.61694 4.61694 ] pdfxs
468.961 649.26 m
( 0.)
[2.46166 4.61694 2.3151 ] pdfxs
478.501 649.26 m
(5%)
[4.61694 7.37412 ] pdfxs
n
426.3 636.06 m
434.88 636.06 l
430.56 637.44 m
431.82 634.68 l
429.36 634.68 l
430.56 637.44 l
h
1 0 0  setrgbcolor
S
0 0 0  setrgbcolor
437.04 633.48 m
(s) show
441.36 633.48 m
(i) show
443.158 633.48 m
(r2 f)
[2.77044 4.61694 2.46166 2.3151 ] pdfxs
455.168 633.48 m
(ob1)
[4.61694 4.61694 4.61694 ] pdfxs
468.961 633.48 m
( 0.)
[2.46166 4.61694 2.3151 ] pdfxs
478.501 633.48 m
(1%)
[4.61694 7.37412 ] pdfxs
n
426.3 620.58 m
434.88 620.58 l
431.43 620.82 m
431.43 620.82 l
431.43 621.466 430.96 621.99 430.38 621.99 c
429.8 621.99 429.33 621.466 429.33 620.82 c
429.33 620.174 429.8 619.65 430.38 619.65 c
430.96 619.65 431.43 620.174 431.43 620.82 c
h
0 0 1  setrgbcolor
S
0 0 0  setrgbcolor
437.04 618.06 m
(s) show
441.36 618.06 m
(i) show
443.158 618.06 m
(r2 f)
[2.7712 4.6177 2.46242 2.31586 ] pdfxs
455.17 618.06 m
(ob1)
[4.6177 4.6177 4.6177 ] pdfxs
468.965 618.06 m
( 0.)
[2.46242 4.6177 2.31586 ] pdfxs
478.506 618.06 m
(05%)
[4.6177 4.6177 7.37488 ] pdfxs
98.28 676.14 m
/N42 19.98 Tf
(AB)
[202.497 201.398 ] pdfxs
q
n
115.68 671.52 86.58 0.0599976 re
W
n
0.0599976 w
n
115.68 671.58 m
297.48 671.58 l
1 1 1  setrgbcolor
S
Q
0.0599976 w
n
115.68 671.58 m
115.68 529.08 l
113.52 529.08 m
115.68 529.08 l
113.52 671.58 m
115.68 671.58 l
115.68 529.08 m
297.48 529.08 l
115.68 526.62 m
115.68 529.08 l
161.1 526.62 m
161.1 529.08 l
206.58 526.62 m
206.58 529.08 l
252 526.62 m
252 529.08 l
297.48 526.62 m
297.48 529.08 l
S
0.899994 w
n
115.68 671.58 m
145.14 664.5 l
147.6 657.42 l
151.92 650.34 l
156.48 643.26 l
156.48 635.76 l
165.72 621.6 l
165.72 607.44 l
167.88 600.36 l
170.34 593.22 l
174.6 586.14 l
177.06 579.06 l
181.68 571.98 l
181.68 557.46 l
188.46 550.38 l
195.18 543.24 l
195.18 536.16 l
211.14 529.08 l
S
0.300003 w
n
115.68 671.58 m
133.8 664.5 l
145.14 657.42 l
151.92 650.34 l
154.38 643.26 l
156.48 635.76 l
158.94 628.68 l
158.94 621.6 l
163.26 614.52 l
172.5 607.44 l
181.68 600.36 l
193.02 593.22 l
195.18 586.14 l
195.18 579.06 l
197.34 571.98 l
197.34 564.54 l
201.96 557.46 l
201.96 550.38 l
211.14 543.24 l
211.14 536.16 l
215.76 529.08 l
0 1 0  setrgbcolor
S
n
115.68 671.58 m
147.6 664.5 l
156.48 657.42 l
158.94 650.34 l
158.94 643.26 l
165.72 635.76 l
165.72 628.68 l
174.6 621.6 l
177.06 614.52 l
177.06 607.44 l
179.22 600.36 l
188.46 593.22 l
188.46 586.14 l
195.18 579.06 l
197.34 571.98 l
199.8 564.54 l
204.42 557.46 l
204.42 550.38 l
208.74 543.24 l
215.76 536.16 l
217.92 529.08 l
1 0 0  setrgbcolor
S
n
115.68 671.58 m
149.76 664.5 l
156.48 657.42 l
158.94 650.34 l
170.34 643.26 l
172.5 635.76 l
179.22 628.68 l
179.22 621.6 l
183.84 614.52 l
183.84 607.44 l
186 600.36 l
188.46 593.22 l
188.46 579.06 l
193.02 571.98 l
199.8 564.54 l
201.96 557.46 l
208.74 550.38 l
220.08 543.24 l
227.16 536.16 l
236.04 529.08 l
0 0 1  setrgbcolor
S
n
115.68 671.58 m
115.68 673.02 l
115.68 671.58 m
115.68 670.2 l
115.68 671.58 m
114.42 671.58 l
115.68 671.58 m
116.88 671.58 l
133.8 664.5 m
133.8 665.94 l
133.8 664.5 m
133.8 663.06 l
133.8 664.5 m
132.54 664.5 l
133.8 664.5 m
135 664.5 l
145.14 657.42 m
145.14 658.86 l
145.14 657.42 m
145.14 655.98 l
145.14 657.42 m
143.94 657.42 l
145.14 657.42 m
146.34 657.42 l
151.92 650.34 m
151.92 651.72 l
151.92 650.34 m
151.92 648.9 l
151.92 650.34 m
150.66 650.34 l
151.92 650.34 m
153.12 650.34 l
154.38 643.26 m
154.38 644.64 l
154.38 643.26 m
154.38 641.82 l
154.38 643.26 m
153.12 643.26 l
154.38 643.26 m
155.58 643.26 l
156.48 635.76 m
156.48 637.2 l
156.48 635.76 m
156.48 634.38 l
156.48 635.76 m
155.28 635.76 l
156.48 635.76 m
157.74 635.76 l
158.94 628.68 m
158.94 630.12 l
158.94 628.68 m
158.94 627.3 l
158.94 628.68 m
157.74 628.68 l
158.94 628.68 m
160.2 628.68 l
158.94 621.6 m
158.94 623.04 l
158.94 621.6 m
158.94 620.16 l
158.94 621.6 m
157.74 621.6 l
158.94 621.6 m
160.2 621.6 l
163.26 614.52 m
163.26 615.96 l
163.26 614.52 m
163.26 613.08 l
163.26 614.52 m
162.06 614.52 l
163.26 614.52 m
164.46 614.52 l
172.5 607.44 m
172.5 608.82 l
172.5 607.44 m
172.5 606 l
172.5 607.44 m
171.24 607.44 l
172.5 607.44 m
173.7 607.44 l
181.68 600.36 m
181.68 601.74 l
181.68 600.36 m
181.68 598.92 l
181.68 600.36 m
180.48 600.36 l
181.68 600.36 m
182.94 600.36 l
193.02 593.22 m
193.02 594.66 l
193.02 593.22 m
193.02 591.84 l
193.02 593.22 m
191.82 593.22 l
193.02 593.22 m
194.28 593.22 l
195.18 586.14 m
195.18 587.58 l
195.18 586.14 m
195.18 584.76 l
195.18 586.14 m
193.98 586.14 l
195.18 586.14 m
196.44 586.14 l
195.18 579.06 m
195.18 580.5 l
195.18 579.06 m
195.18 577.62 l
195.18 579.06 m
193.98 579.06 l
195.18 579.06 m
196.44 579.06 l
197.34 571.98 m
197.34 573.42 l
197.34 571.98 m
197.34 570.54 l
197.34 571.98 m
196.14 571.98 l
197.34 571.98 m
198.6 571.98 l
197.34 564.54 m
197.34 565.92 l
197.34 564.54 m
197.34 563.1 l
197.34 564.54 m
196.14 564.54 l
197.34 564.54 m
198.6 564.54 l
0 1 0  setrgbcolor
S
n
201.96 557.46 m
201.96 558.84 l
201.96 557.46 m
201.96 556.02 l
201.96 557.46 m
200.7 557.46 l
201.96 557.46 m
203.16 557.46 l
201.96 550.38 m
201.96 551.76 l
201.96 550.38 m
201.96 548.94 l
201.96 550.38 m
200.7 550.38 l
201.96 550.38 m
203.16 550.38 l
211.14 543.24 m
211.14 544.68 l
211.14 543.24 m
211.14 541.86 l
211.14 543.24 m
209.94 543.24 l
211.14 543.24 m
212.4 543.24 l
211.14 536.16 m
211.14 537.6 l
211.14 536.16 m
211.14 534.78 l
211.14 536.16 m
209.94 536.16 l
211.14 536.16 m
212.4 536.16 l
215.76 529.08 m
215.76 530.52 l
215.76 529.08 m
215.76 527.64 l
215.76 529.08 m
214.56 529.08 l
215.76 529.08 m
217.02 529.08 l
S
n
115.68 673.02 m
116.88 670.2 l
114.42 670.2 l
115.68 673.02 l
h
147.6 665.94 m
148.8 663.06 l
146.34 663.06 l
147.6 665.94 l
h
156.48 658.86 m
157.74 655.98 l
155.28 655.98 l
156.48 658.86 l
h
158.94 651.72 m
160.2 648.9 l
157.74 648.9 l
158.94 651.72 l
h
158.94 644.64 m
160.2 641.82 l
157.74 641.82 l
158.94 644.64 l
h
165.72 637.2 m
166.92 634.38 l
164.46 634.38 l
165.72 637.2 l
h
165.72 630.12 m
166.92 627.3 l
164.46 627.3 l
165.72 630.12 l
h
174.6 623.04 m
175.86 620.16 l
173.4 620.16 l
174.6 623.04 l
h
177.06 615.96 m
178.32 613.08 l
175.86 613.08 l
177.06 615.96 l
h
177.06 608.82 m
178.32 606 l
175.86 606 l
177.06 608.82 l
h
179.22 601.74 m
180.48 598.92 l
178.02 598.92 l
179.22 601.74 l
h
188.46 594.66 m
189.66 591.84 l
187.2 591.84 l
188.46 594.66 l
h
188.46 587.58 m
189.66 584.76 l
187.2 584.76 l
188.46 587.58 l
h
195.18 580.5 m
196.44 577.62 l
193.98 577.62 l
195.18 580.5 l
h
197.34 573.42 m
198.6 570.54 l
196.14 570.54 l
197.34 573.42 l
h
199.8 565.92 m
201.06 563.1 l
198.6 563.1 l
199.8 565.92 l
h
204.42 558.84 m
205.62 556.02 l
203.16 556.02 l
204.42 558.84 l
h
204.42 551.76 m
205.62 548.94 l
203.16 548.94 l
204.42 551.76 l
h
208.74 544.68 m
209.94 541.86 l
207.48 541.86 l
208.74 544.68 l
h
215.76 537.6 m
217.02 534.78 l
214.56 534.78 l
215.76 537.6 l
h
217.92 530.52 m
219.18 527.64 l
216.72 527.64 l
217.92 530.52 l
h
1 0 0  setrgbcolor
S
n
116.49 671.82 m
116.49 671.82 l
116.49 672.499 116.02 673.05 115.44 673.05 c
114.86 673.05 114.39 672.499 114.39 671.82 c
114.39 671.141 114.86 670.59 115.44 670.59 c
116.02 670.59 116.49 671.141 116.49 671.82 c
h
150.57 664.74 m
150.57 664.74 l
150.57 665.419 150.1 665.97 149.52 665.97 c
148.94 665.97 148.47 665.419 148.47 664.74 c
148.47 664.061 148.94 663.51 149.52 663.51 c
150.1 663.51 150.57 664.061 150.57 664.74 c
h
157.35 657.66 m
157.35 657.66 l
157.35 658.339 156.88 658.89 156.3 658.89 c
155.72 658.89 155.25 658.339 155.25 657.66 c
155.25 656.981 155.72 656.43 156.3 656.43 c
156.88 656.43 157.35 656.981 157.35 657.66 c
h
159.81 650.52 m
159.81 650.52 l
159.81 651.182 159.34 651.72 158.76 651.72 c
158.18 651.72 157.71 651.182 157.71 650.52 c
157.71 649.858 158.18 649.32 158.76 649.32 c
159.34 649.32 159.81 649.858 159.81 650.52 c
h
171.15 643.44 m
171.15 643.44 l
171.15 644.102 170.68 644.64 170.1 644.64 c
169.52 644.64 169.05 644.102 169.05 643.44 c
169.05 642.778 169.52 642.24 170.1 642.24 c
170.68 642.24 171.15 642.778 171.15 643.44 c
h
173.31 636 m
173.31 636 l
173.31 636.662 172.84 637.2 172.26 637.2 c
171.68 637.2 171.21 636.662 171.21 636 c
171.21 635.338 171.68 634.8 172.26 634.8 c
172.84 634.8 173.31 635.338 173.31 636 c
h
180.09 628.92 m
180.09 628.92 l
180.09 629.582 179.62 630.12 179.04 630.12 c
178.46 630.12 177.99 629.582 177.99 628.92 c
177.99 628.258 178.46 627.72 179.04 627.72 c
179.62 627.72 180.09 628.258 180.09 628.92 c
h
180.09 621.84 m
180.09 621.84 l
180.09 622.519 179.62 623.07 179.04 623.07 c
178.46 623.07 177.99 622.519 177.99 621.84 c
177.99 621.161 178.46 620.61 179.04 620.61 c
179.62 620.61 180.09 621.161 180.09 621.84 c
h
184.65 614.76 m
184.65 614.76 l
184.65 615.439 184.18 615.99 183.6 615.99 c
183.02 615.99 182.55 615.439 182.55 614.76 c
182.55 614.081 183.02 613.53 183.6 613.53 c
184.18 613.53 184.65 614.081 184.65 614.76 c
h
184.65 607.62 m
184.65 607.62 l
184.65 608.282 184.18 608.82 183.6 608.82 c
183.02 608.82 182.55 608.282 182.55 607.62 c
182.55 606.958 183.02 606.42 183.6 606.42 c
184.18 606.42 184.65 606.958 184.65 607.62 c
h
186.81 600.54 m
186.81 600.54 l
186.81 601.202 186.34 601.74 185.76 601.74 c
185.18 601.74 184.71 601.202 184.71 600.54 c
184.71 599.878 185.18 599.34 185.76 599.34 c
186.34 599.34 186.81 599.878 186.81 600.54 c
h
189.27 593.46 m
189.27 593.46 l
189.27 594.122 188.8 594.66 188.22 594.66 c
187.64 594.66 187.17 594.122 187.17 593.46 c
187.17 592.798 187.64 592.26 188.22 592.26 c
188.8 592.26 189.27 592.798 189.27 593.46 c
h
189.27 586.38 m
189.27 586.38 l
189.27 587.042 188.8 587.58 188.22 587.58 c
187.64 587.58 187.17 587.042 187.17 586.38 c
187.17 585.718 187.64 585.18 188.22 585.18 c
188.8 585.18 189.27 585.718 189.27 586.38 c
h
189.27 579.3 m
189.27 579.3 l
189.27 579.979 188.8 580.53 188.22 580.53 c
187.64 580.53 187.17 579.979 187.17 579.3 c
187.17 578.621 187.64 578.07 188.22 578.07 c
188.8 578.07 189.27 578.621 189.27 579.3 c
h
193.89 572.22 m
193.89 572.22 l
193.89 572.899 193.42 573.45 192.84 573.45 c
192.26 573.45 191.79 572.899 191.79 572.22 c
191.79 571.541 192.26 570.99 192.84 570.99 c
193.42 570.99 193.89 571.541 193.89 572.22 c
h
200.64 564.72 m
200.64 564.72 l
200.64 565.382 200.183 565.92 199.62 565.92 c
199.057 565.92 198.6 565.382 198.6 564.72 c
198.6 564.058 199.057 563.52 199.62 563.52 c
200.183 563.52 200.64 564.058 200.64 564.72 c
h
202.77 557.64 m
202.77 557.64 l
202.77 558.302 202.3 558.84 201.72 558.84 c
201.14 558.84 200.67 558.302 200.67 557.64 c
200.67 556.978 201.14 556.44 201.72 556.44 c
202.3 556.44 202.77 556.978 202.77 557.64 c
h
209.55 550.56 m
209.55 550.56 l
209.55 551.222 209.08 551.76 208.5 551.76 c
207.92 551.76 207.45 551.222 207.45 550.56 c
207.45 549.898 207.92 549.36 208.5 549.36 c
209.08 549.36 209.55 549.898 209.55 550.56 c
h
220.89 543.48 m
220.89 543.48 l
220.89 544.142 220.42 544.68 219.84 544.68 c
219.26 544.68 218.79 544.142 218.79 543.48 c
218.79 542.818 219.26 542.28 219.84 542.28 c
220.42 542.28 220.89 542.818 220.89 543.48 c
h
0 0 1  setrgbcolor
S
n
227.97 536.4 m
227.97 536.4 l
227.97 537.079 227.5 537.63 226.92 537.63 c
226.34 537.63 225.87 537.079 225.87 536.4 c
225.87 535.721 226.34 535.17 226.92 535.17 c
227.5 535.17 227.97 535.721 227.97 536.4 c
h
236.88 529.32 m
236.88 529.32 l
236.88 529.999 236.423 530.55 235.86 530.55 c
235.297 530.55 234.84 529.999 234.84 529.32 c
234.84 528.641 235.297 528.09 235.86 528.09 c
236.423 528.09 236.88 528.641 236.88 529.32 c
h
S
0 0 0  setrgbcolor
106.74 526.26 m
/N37 [6.66 0 0 7.8 0 0] Tf
(0) show
106.74 668.76 m
(1) show
113.82 514.56 m
(0) show
157.439 514.56 m
(2) show
161.098 514.56 m
(04)
[41.7589 41.7589 ] pdfxs
206.516 514.56 m
(0) show
248.335 514.56 m
(6) show
251.994 514.56 m
(08)
[41.7589 41.7589 ] pdfxs
297.412 514.56 m
(0) show
190.26 503.58 m
(Ge)
[5.20607 3.72755 ] pdfxs
199.125 503.58 m
(n) show
202.545 503.58 m
(e) show
206.204 503.58 m
(r) show
208.363 503.58 m
(a) show
212.022 503.58 m
(ti)
[1.87607 1.50301 ] pdfxs
215.457 503.58 m
(o) show
219.416 503.58 m
(n) show
106.14 574.8 m
/N37 [0 6.66 -7.8 0 0 0] Tf
(F) show
106.14 578.821 m
(r) show
106.14 580.921 m
(actio)
[3.71963 3.34667 1.86815 1.49509 3.71963 ] pdfys
106.14 595.37 m
(n) show
106.14 598.729 m
( V)
[1.86083 4.45884 ] pdfys
106.14 605.21 m
(i) show
106.14 606.71 m
(ab)
[3.71963 3.71963 ] pdfys
106.14 614.088 m
(l) show
106.14 615.347 m
(e) show
0.899994 w
n
220.98 667.68 m
229.62 667.68 l
S
231.72 664.68 m
/N37 [8.39999 0 0 9.60001 0 0] Tf
(BY4742)
[5.54313 5.54313 4.61079 4.61079 4.61079 4.61079 ] pdfxs
261.198 664.68 m
( 2%)
[2.46119 4.61079 7.40793 ] pdfxs
0.300003 w
n
220.98 651.36 m
229.62 651.36 l
225.3 651.36 m
225.3 652.8 l
225.3 651.36 m
225.3 649.98 l
225.3 651.36 m
224.04 651.36 l
225.3 651.36 m
226.5 651.36 l
0 1 0  setrgbcolor
S
0 0 0  setrgbcolor
231.72 648.721 m
(BY4742)
[5.5448 5.5448 4.61246 4.61246 4.61246 4.61246 ] pdfxs
261.206 648.721 m
( 0.)
[2.46119 4.61246 2.27726 ] pdfxs
270.741 648.721 m
(5%)
[4.61246 7.4096 ] pdfxs
n
220.98 635.1 m
229.62 635.1 l
225.3 636.48 m
226.5 633.66 l
224.04 633.66 l
225.3 636.48 l
h
1 0 0  setrgbcolor
S
0 0 0  setrgbcolor
231.72 632.401 m
(BY4742)
[5.5448 5.5448 4.61246 4.61246 4.61246 4.61246 ] pdfxs
261.206 632.401 m
( 0.)
[2.46119 4.61246 2.27726 ] pdfxs
270.741 632.401 m
(1%)
[4.61246 7.4096 ] pdfxs
n
220.98 619.14 m
229.62 619.14 l
226.11 619.32 m
226.11 619.32 l
226.11 619.982 225.64 620.52 225.06 620.52 c
224.48 620.52 224.01 619.982 224.01 619.32 c
224.01 618.658 224.48 618.12 225.06 618.12 c
225.64 618.12 226.11 618.658 226.11 619.32 c
h
0 0 1  setrgbcolor
S
0 0 0  setrgbcolor
231.72 616.44 m
(BY4742)
[5.5448 5.5448 4.61246 4.61246 4.61246 4.61246 ] pdfxs
261.206 616.44 m
( 0.)
[2.46119 4.61246 2.27726 ] pdfxs
270.741 616.44 m
(05%)
[4.61246 4.61246 7.4096 ] pdfxs
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF
